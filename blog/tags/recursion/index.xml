<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Recursion on Lithium Theme</title>
    <link>/tags/recursion/index.xml</link>
    <description>Recent content in Recursion on Lithium Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/tags/recursion/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Too Big to Be Accurate(1): Which is the Most Powerful Calculator in the World?</title>
      <link>/2011/01/22/too-big-to-be-accurate1-which-is-the-most-powerful-calculator-in-the-world/</link>
      <pubDate>Sat, 22 Jan 2011 17:05:17 +0000</pubDate>
      
      <guid>/2011/01/22/too-big-to-be-accurate1-which-is-the-most-powerful-calculator-in-the-world/</guid>
      <description>&lt;p&gt;Calculate the factorial of 171 (171!)? Just TRY! It is equal to 171*170*169*….2*1.&lt;/p&gt;

&lt;h3 id=&#34;1-google-calculator&#34;&gt;1. Google calculator&lt;/h3&gt;

&lt;p&gt;As Google fanatics, I first try to search the answer via Google:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/Google171.png&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;Google171&#34; border=&#34;0&#34; alt=&#34;Google171&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/Google171_thumb.png&#34; width=&#34;336&#34; height=&#34;116&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Whoops, nothing interested returned! Type “170!” and get the output:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/Google170.png&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;Google170&#34; border=&#34;0&#34; alt=&#34;Google170&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/Google170_thumb.png&#34; width=&#34;244&#34; height=&#34;110&#34; /&gt;&lt;/a&gt; Why kinda things happened in this calculator? 171! is just equal to 171*170!.&lt;/p&gt;

&lt;h3 id=&#34;2-excel&#34;&gt;2. Excel&lt;/h3&gt;

&lt;p&gt;Switch to Excel spreadsheet. Function fact(*) used:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/Excel170.png&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;Excel170&#34; border=&#34;0&#34; alt=&#34;Excel170&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/Excel170_thumb.png&#34; width=&#34;228&#34; height=&#34;66&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/Excel171.png&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;Excel171&#34; border=&#34;0&#34; alt=&#34;Excel171&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/Excel171_thumb.png&#34; width=&#34;244&#34; height=&#34;64&#34; /&gt;&lt;/a&gt; Oo, interesting. The same.&lt;/p&gt;

&lt;h3 id=&#34;3-sas&#34;&gt;3. SAS&lt;/h3&gt;

&lt;p&gt;Google and Excel may be the niche players in calculators’ family. Why not try to use some programming languages?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;As a SAS programmer, my handy tool is SAS of course.&lt;/p&gt;

&lt;p&gt;First, I use &lt;strong&gt;SAS data step&lt;/strong&gt; with its build-in function fact(*):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;data &lt;em&gt;null&lt;/em&gt;; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; x=fact(170); &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; y=fact(171); &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; put x= y=; &lt;br /&gt;run;&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and I get&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: Invalid argument to function FACT at line 49 column 7.&lt;br /&gt;
&lt;font color=&#34;#ff0000&#34;&gt;x=7.257416E306 y=.&lt;/font&gt;&lt;br /&gt;
&lt;font color=&#34;#ff0000&#34;&gt;x=7.257416E306 y=. &lt;em&gt;ERROR&lt;/em&gt;=1 &lt;em&gt;N&lt;/em&gt;=1&lt;/font&gt;&lt;br /&gt;
NOTE: Mathematical operations could not be performed at the following places. The results of the operations have been set to missing values.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Expected or unexpected? I don’t know how this fact(*) function is defined, and&amp;#160; try to define a function to calculate the factorials by myself. In SAS 9.2, you can use &lt;strong&gt;PROC FCMP&lt;/strong&gt;(also available at 9.1.3 as a experimental procedure):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;proc fcmp outlib = work.funcs.math ; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; function factorial(k) ; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; if k = 0 then return(1) ; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; z = k ; *preserve k ; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; x = factorial(k-1) ; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; k = z ; *recover k ; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; k = k * x ; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; return(k) ; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; endsub ; &lt;br /&gt;quit ; &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;options cmplib=work.funcs ; &lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Use this self-defined function to get 170!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;proc fcmp ; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; x = factorial (170) ; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; put x = ; &lt;br /&gt;run ; &lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The FCMP procedure returns&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;x=7.257416E306&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Try to calculate 171! ?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;proc fcmp ; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; y = factorial (171) ; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; put y = ; &lt;br /&gt;run ;&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just get the overflow error. The interaction stops at 170!:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ERROR: An overflow occurred during execution in function &amp;#8216;factorial&amp;#8217; in statement number 7 at&amp;#160;&amp;#160; line 10 column 1.&lt;br /&gt;
&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; The statement was:&lt;br /&gt;
&amp;#160;&amp;#160;&amp;#160; 1&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; (10:1)&amp;#160;&amp;#160;&amp;#160; k = (k=171) * (&lt;font color=&#34;#ff0000&#34;&gt;x=7.257416E306&lt;/font&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The above function definitions use recursion. Recursion may have some limitation on efficiency. We could try the loop without recursion. &lt;strong&gt;SAS/IML&lt;/strong&gt; doesn’t support recursion. Let SAS/IML to the court:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;proc iml; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; start factorial (n); &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; fact=1; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; do i=1 to n; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; fact=fact*i; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; end; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; return (fact); &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; finish factorial;&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&amp;#160;&amp;#160;&amp;#160; x= factorial (170); &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; print x;&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&amp;#160;&amp;#160;&amp;#160; y= factorial (171); &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; print y; &lt;br /&gt;quit;&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, I get 170!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#160;&amp;#160;&amp;#160; x&lt;br /&gt;
7.257E306&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and a overflow error for 171!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; y= factorial (171);&lt;br /&gt;
ERROR: Overflow error in *.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Turing, Von Neumann and Tony, what happened?&lt;/p&gt;

&lt;h3 id=&#34;4-r&#34;&gt;4. R&lt;/h3&gt;

&lt;p&gt;When SAS failed, lots of voices pop up: use R! OK, Rction!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font color=&#34;#ff0000&#34;&gt;&amp;gt; x=factorial(170);x&lt;/font&gt;&lt;br /&gt;
[1] 7.257416e+306&lt;br /&gt;
&lt;font color=&#34;#ff0000&#34;&gt;&amp;gt; y=factorial(171);y&lt;/font&gt;&lt;br /&gt;
Warning message:&lt;br /&gt;
In factorial(171) : value out of range in &amp;#8216;gammafn&amp;#8217;&lt;br /&gt;
[1] Inf&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;5-c&#34;&gt;5. C++&lt;/h3&gt;

&lt;p&gt;I don’t want to lose my patience. Think C++(use both recursive and non-recursive methods):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;#include &lt;iostream&gt; &lt;br /&gt;using namespace std; &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;double factRecursive(double num); &lt;br /&gt;double factNonRecursive(double num); &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;int main() &lt;br /&gt;{ &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; cout&amp;lt;&lt;endl;&amp;#160;&amp;#160;&amp;#160; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; cout&amp;lt;&amp;lt;&amp;ldquo;Recursive: the factorial of 170 is &amp;ldquo;&amp;lt;&lt;factRecursive(170)&lt;&lt;endl; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; cout&amp;lt;&amp;lt;&amp;ldquo;Recursive: the factorial of 171 is &amp;ldquo;&amp;lt;&lt;factRecursive(171)&lt;&lt;endl; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; cout&amp;lt;&lt;endl;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&amp;#160;&amp;#160;&amp;#160; cout&amp;lt;&amp;lt;&amp;ldquo;NonRecursive: the factorial of 170 is &amp;ldquo;&amp;lt;&lt;factNonRecursive(170)&lt;&lt;endl; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; cout&amp;lt;&amp;lt;&amp;ldquo;NonRecursive: the factorial of 171 is &amp;ldquo;&amp;lt;&lt;factNonRecursive(171)&lt;&lt;endl; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; cout&amp;lt;&lt;endl;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;return 0; &lt;br /&gt;} &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;double factRecursive (double num) &lt;br /&gt;{ &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; if (num==0) &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; return 1; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; else &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; return num*factRecursive(num-1); &lt;br /&gt;} &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;double factNonRecursive (double num) &lt;br /&gt;{ &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; double fact=1; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; for (double i=2;i&amp;lt;=num;i++) fact *=i; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; return fact; &lt;br /&gt;}&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unfortunately, same story once more:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/Cpp.png&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;Cpp&#34; border=&#34;0&#34; alt=&#34;Cpp&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/Cpp_thumb.png&#34; width=&#34;449&#34; height=&#34;121&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well. The story&amp;#8217;s played out like this. It may be not the limitable of the language but the machine. I check which is the largest numbers my computer supports:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;#include &lt;iostream&gt; &lt;br /&gt;#include &lt;cfloat&gt; &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;using namespace std; &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;int main() &lt;br /&gt;{ &lt;br /&gt;&amp;#160; cout&amp;lt;&amp;lt;&amp;ldquo;maxinum double value of machine: &amp;ldquo;&amp;lt;&lt;DBL_MAX&lt;&lt;endl; &lt;br /&gt;&amp;#160; return 0; &lt;/font&gt;&lt;font face=&#34;Courier New&#34;&gt;}&lt;/font&gt;&lt;/p&gt;

&lt;pre&gt;maxinum double value of machine: &lt;font color=&#34;#ff0000&#34;&gt;1.79769e+308&lt;/font&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now everything’s in the open. The factorial of 170 is about 7.257416e+306. 171! is too big to be supported by my PC.&lt;/p&gt;

&lt;p&gt;(Note: I put these codes in &lt;a href=&#34;http://codepad.org&#34;&gt;http://codepad.org&lt;/a&gt;, a online complier. if you don’t have any C++ complier in your machine, you can see the codes and outputs in:&lt;a href=&#34;http://codepad.org/xnneavsw&#34;&gt;http://codepad.org/xnneavsw&lt;/a&gt;&amp;#160; and &lt;a href=&#34;http://codepad.org/3FeEC9t2&#34;&gt;http://codepad.org/3FeEC9t2&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&#34;6-a-href-http-www-wolframalpha-com-target-blank-wolframalpha-a&#34;&gt;6. &lt;a href=&#34;http://www.wolframalpha.com/&#34; target=&#34;_blank&#34;&gt;WolframAlpha&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Struggled for hours, I turn to &lt;a href=&#34;http://www.wolframalpha.com&#34; target=&#34;_blank&#34;&gt;WolframAlpha&lt;/a&gt; computing platform. It returns &lt;a href=&#34;http://www.wolframalpha.com/input/?i=171!&#34; target=&#34;_blank&#34;&gt;the factorial of 171&lt;/a&gt; AT LAST:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/WA171.gif&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;WA171&#34; border=&#34;0&#34; alt=&#34;WA171&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/WA171_thumb.gif&#34; width=&#34;454&#34; height=&#34;128&#34; /&gt;&lt;/a&gt;&amp;#160;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/WA171_s.gif&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;WA171_s&#34; border=&#34;0&#34; alt=&#34;WA171_s&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/WA171_s_thumb.gif&#34; width=&#34;477&#34; height=&#34;52&#34; /&gt;&lt;/a&gt;&amp;#160; AT LAST we know the factorial of 171 has 310 digits.&lt;/p&gt;

&lt;h3 id=&#34;7-windows-calculator&#34;&gt;7. Windows Calculator&lt;/h3&gt;

&lt;p&gt;I try to use Windows build-in calculator. Amazing, it is powerful:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/winCalc.png&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;winCalc&#34; border=&#34;0&#34; alt=&#34;winCalc&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/winCalc_thumb.png&#34; width=&#34;323&#34; height=&#34;250&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;8-python&#34;&gt;8. Python&lt;/h3&gt;

&lt;p&gt;Return to programming language.&amp;#160; First, I defined a function(recursive version) in Python and then use its MATH library:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def factorial(n):&lt;br /&gt; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; if n==0: &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;
  &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; return 1
&lt;/p&gt;

&lt;p&gt;
  &amp;#160;&amp;#160;&amp;#160; else:
&lt;/p&gt;

&lt;p&gt;
  &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; return n*factorial(n-1) &lt;/font&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;font face=&#34;Courier New&#34;&gt;&lt;font color=&#34;#ff0000&#34;&gt;&gt;&gt;&gt; factorial(170)&lt;/font&gt; &lt;/p&gt; 
  

&lt;p&gt;&lt;p&gt;
    7257415615307998967396728211129263114716991681296451376
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    5435777989005618434017061578523507492426174595114909912
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    3783852077666602256544275302532890077320751090240043028
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    0058295603966612599658257104398558294257568966313439612
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    2625710949468067112055688804571933402126614528000000000
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    00000000000000000000000000000000L
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;font color=&#34;#ff0000&#34;&gt;&amp;gt;&amp;gt;&amp;gt; factorial(171)&lt;/font&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    1241018070217667823424840524103103992616605577501693185
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    3889518036119960752216917529927519781204875855764649595
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    0167038705280988985869071076733124203221848436431047357
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    7889968548278290754541561964852153468318044293239598173
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    6968996572359039476161522785581800611763651084288000000
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    00000000000000000000000000000000000L&lt;/font&gt;
  &lt;/p&gt;&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;
    &lt;p&gt;
      &amp;gt;&amp;gt;&amp;gt; import math&lt;br /&gt; &lt;br /&gt;&lt;font color=&#34;#ff0000&#34;&gt;&amp;gt;&amp;gt;&amp;gt; math.factorial(171)&lt;/font&gt;
    &lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;
  1241018070217667823424840524103103992616605577501693185
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
  3889518036119960752216917529927519781204875855764649595
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
  0167038705280988985869071076733124203221848436431047357
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
  7889968548278290754541561964852153468318044293239598173
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
  6968996572359039476161522785581800611763651084288000000
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
  00000000000000000000000000000000000L
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Amazing, Python beats up C++!
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;em&gt;(to be continued :&lt;/em&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;em&gt;Too Big to Be Accurate(2): &lt;font color=&#34;#ff0000&#34;&gt;Approximation&lt;/font&gt; &lt;/em&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;em&gt;)&lt;/em&gt;
  &lt;/p&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Recursion: Biblical Evidences</title>
      <link>/2010/11/06/recursion-biblical-evidences/</link>
      <pubDate>Sat, 06 Nov 2010 09:58:56 +0000</pubDate>
      
      <guid>/2010/11/06/recursion-biblical-evidences/</guid>
      <description>&lt;p&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;  &lt;strong&gt;To Iterate is Human, to Recurse, Divine.&lt;/strong&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &amp;#8211;by &lt;a href=&#34;http://en.wikipedia.org/wiki/L._Peter_Deutsch&#34;&gt;L. Peter Deutsch&lt;/a&gt;, creator of Ghostscript. (I also love his saying “_The best thing about a Boolean is even if you are wrong, you are only off by a bit_”)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I learned this quote from &lt;a href=&#34;http://en.wikipedia.org/wiki/Anthony_James_Barr&#34;&gt;Tony Barr&lt;/a&gt;, designer and developer of &lt;a href=&#34;http://en.wikipedia.org/wiki/SAS_(software)&#34;&gt;SAS&lt;/a&gt; (the Statistical Analysis System).&amp;#160; He also used the &lt;a href=&#34;http://en.wikipedia.org/wiki/Recursive_descent_parser&#34;&gt;Recursive Descent&lt;/a&gt; method to develop SAS complier. Now Tony is working for AMOR (A Model of Reality). AMOR is the &lt;strong&gt;self-defining&lt;/strong&gt; system for modeling ideas and concepts (or human knowledge).—Recurse again: in AMOR, the type is defined by the type of type, and, the type of type is also defined by the type of type of type &amp;hellip;&lt;/p&gt;

&lt;p&gt;To help to understand the DIVINE part of recursion, Tony gave two examples from the &lt;em&gt;Bible:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Golden Rule is recursive.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Do unto others as you would have them do unto you. (&lt;em&gt;see&lt;/em&gt; &lt;a href=&#34;http://en.wikisource.org/wiki/Bible_(King_James)/Matthew#7:12&#34;&gt;Matthew 7:12&lt;/a&gt;, or &lt;a href=&#34;http://en.wikisource.org/wiki/Bible_(King_James)/Luke#6:31&#34;&gt;Luke 6:31&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;God indentify himself in a recursive way.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Moses asked God for his name. Then God said to Moses, “I AM THAT I AM.” (&lt;em&gt;see&lt;/em&gt; &lt;a href=&#34;http://www.sacred-texts.com/bib/kjv/exo003.htm&#34;&gt;Exodus 3.14&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’d like add two items (from a programmer’s perspective &lt;strong&gt;rather than&lt;/strong&gt; Biblical Theology):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Recursion at the very start&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;In the beginning was the Word, and the Word was with God, and the Word was God. (&lt;em&gt;see&lt;/em&gt; &lt;a href=&#34;http://bible.cc/john/1-1.htm&#34;&gt;John 1.1&lt;/a&gt;; also &lt;em&gt;see&lt;/em&gt; &lt;a href=&#34;http://www.wired.com/wired/archive/10.12/holytech_pr.html&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;The Trinity recursive way&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;First, there is only one God in Christian doctrine. God the Son duplicates the nature of God the Father in every way exactly, and so God the Spirit. And what’s about God the Father? &lt;em&gt;see&lt;/em&gt; above.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Recursive Referencing and Binomial Proportion Interval</title>
      <link>/2010/11/03/recursive-referencing-and-binomial-proportion-interval/</link>
      <pubDate>Wed, 03 Nov 2010 20:47:44 +0000</pubDate>
      
      <guid>/2010/11/03/recursive-referencing-and-binomial-proportion-interval/</guid>
      <description>&lt;p&gt;To understand &lt;a href=&#34;http://en.wikipedia.org/wiki/Recursion&#34;&gt;recursion&lt;/a&gt;, one of the most important concepts in programming languages, you could watch the movie, Chris Nolan’s &lt;em&gt;&lt;a href=&#34;www.inceptionmovie.com&#34;&gt;Inception&lt;/a&gt;&lt;/em&gt;: it is about a dream within a dream within a dream, …and, read two statistical papers by Professor &lt;a href=&#34;http://medicine.cf.ac.uk/en/person/prof-robert-gordon-newcombe/&#34;&gt;Robert Newcombe&lt;/a&gt;, one of the most &lt;a href=&#34;http://medicine.cf.ac.uk/en/person/prof-robert-gordon-newcombe/publications/&#34;&gt;prolific statisticians&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;cite&gt;&lt;a href=&#34;http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&amp;db=pubmed&amp;dopt=Abstract&amp;list_uids=9595616&amp;query_hl=1&#34;&gt;&lt;strong&gt;Two-sided confidence intervals for the single proportion: comparison of seven methods.&lt;/strong&gt;&lt;/a&gt; &lt;/cite&gt;&lt;br /&gt;
Newcombe RG, &lt;font color=&#34;#ff0000&#34;&gt;&lt;cite&gt;Stat Med&lt;/cite&gt; , Volume 17 , 8 (April 1998) pp.857-&lt;strong&gt;872&lt;/strong&gt;&lt;/font&gt; ****&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;&lt;a href=&#34;http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&amp;db=pubmed&amp;dopt=Abstract&amp;list_uids=9595617&amp;query_hl=1&#34;&gt;&lt;strong&gt;Interval estimation for the difference between independent proportions: comparison of eleven methods.&lt;/strong&gt;&lt;/a&gt; &lt;/cite&gt;&lt;br /&gt;
Newcombe RG, &lt;font color=&#34;#ff0000&#34;&gt;&lt;cite&gt;Stat Med&lt;/cite&gt; , Volume 17 , 8 (April 1998) pp.&lt;strong&gt;873&lt;/strong&gt;-890&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These two widely cited papers evaluate 7 and 11 methods to calculate single proportion (paper &lt;font color=&#34;#ff0000&#34;&gt;A&lt;/font&gt;) and the difference between proportions (paper &lt;font color=&#34;#ff0000&#34;&gt;B&lt;/font&gt;), respectively. Further more, they were in the same issue of &lt;a href=&#34;http://onlinelibrary.wiley.com/journal/10.1002/(ISSN)1097-0258&#34;&gt;&lt;em&gt;Statistics in Medicine&lt;/em&gt;&lt;/a&gt;(Volume 17, 1998), and, they were also cross referenced! So here is a live story about recursive referencing(thanks to Prof. Newcombe):&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2010/11/megamonalisa_recursion.jpg&#34;&gt;&lt;img style=&#34;border-bottom: 0px; border-left: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px&#34; title=&#34;megamonalisa_recursion&#34; border=&#34;0&#34; alt=&#34;megamonalisa_recursion&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2010/11/megamonalisa_recursion_thumb.jpg&#34; width=&#34;245&#34; height=&#34;371&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An author writes two papers, A and B;&lt;/li&gt;
&lt;li&gt;Paper B is in the&amp;#160; bibliographic reference session of paper A;&lt;/li&gt;
&lt;li&gt;Paper A is also in the&amp;#160; bibliographic reference session of paper B;&lt;/li&gt;
&lt;li&gt;Paper A and paper B are in the same issue of a journal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;font color=&#34;#ff0000&#34;&gt;Note&lt;/font&gt; that for Prof. Newcombe’s two linked papers, it is common and acceptable in publication practices. Recently I used these two wonderful papers to learn CI calculation and this post just want to lead to the concept of “recursion”&amp;#160; (reference in reference in reference).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>