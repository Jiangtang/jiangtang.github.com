<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on Jiangtang Hu | 胡江堂</title>
    <link>/tags/algorithms/index.xml</link>
    <description>Recent content in Algorithms on Jiangtang Hu | 胡江堂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/tags/algorithms/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SAS Algorithmically(1): Newton-Raphson method</title>
      <link>/2010/10/21/sas-algorithmically1-newton-raphson-method/</link>
      <pubDate>Thu, 21 Oct 2010 21:39:42 +0000</pubDate>
      
      <guid>/2010/10/21/sas-algorithmically1-newton-raphson-method/</guid>
      <description>&lt;p&gt;A good reference for the basic algorithms of Newton-Raphson method to calculate the square root of a number, &lt;em&gt;see&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://mathforum.org/library/drmath/view/52644.html&#34;&gt;http://mathforum.org/library/drmath/view/52644.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the SAS codes(self-explanatory):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;data root; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; /&lt;em&gt;question: find the square root of 4&lt;/em&gt;/ &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; x=4;&amp;#160; &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; /&lt;em&gt;first choose a rough approximation of sqrt(4); &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; actually, you can start with any numbers&lt;/em&gt;/ &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; y0=1;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; count=0;/&lt;em&gt;init count number&lt;/em&gt;/ &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; do until (w&lt;1e-8); /*set a small tolerance error*/ &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; count=count+1;&amp;#160;&amp;#160; /&lt;em&gt;accumulate count number&lt;/em&gt;/ &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; y=(y0+x/y0)/2;&amp;#160;&amp;#160; /&lt;em&gt;Newton&amp;#8217;s formula&lt;/em&gt;/ &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; w=abs(y-y0); /&lt;em&gt;if close, exit;&lt;/em&gt;/ &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; y0=y;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; /* otherwise, keep the new one*/ &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; end; &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; output; &lt;br /&gt;run;&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The outputs:&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;x&amp;#160;&amp;#160;&amp;#160; y0&amp;#160;&amp;#160;&amp;#160; count&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; w&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; y&lt;/p&gt;

&lt;p&gt;4&amp;#160;&amp;#160;&amp;#160;&amp;#160; 2&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 6&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 2.2204E-15&amp;#160;&amp;#160;&amp;#160; 2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After 6 iterations, Newton-Raphson(also called &lt;strong&gt;divide-and-average&lt;/strong&gt;) gets an approximated square root. See what happed during each iteration compared the output generated by SAS function,sqrt():&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;data root; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; x=4;&amp;#160; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; y0=1;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; count=0; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; do until (w&lt;1e-8);&amp;#160;&amp;#160; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; count=count+1;&amp;#160;&amp;#160; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; y=(y0+x/y0)/2;&amp;#160; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; w=abs(y-y0); &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; y0=y; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; if y =sqrt(x) then is_eq_sqrt=&amp;ldquo;YES&amp;rdquo;; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; else is_eq_sqrt=&amp;ldquo;NO&amp;rdquo;; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; output; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; end; &lt;br /&gt;run;&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Outputs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;x&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; y0&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; count&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; w&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; y&amp;#160;&amp;#160;&amp;#160;&amp;#160; is_eq_sqrt&lt;/p&gt;

&lt;p&gt;4&amp;#160;&amp;#160;&amp;#160; 2.50000&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 1&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 1.50000&amp;#160;&amp;#160;&amp;#160; 2.50000&amp;#160;&amp;#160;&amp;#160;&amp;#160; NO&lt;br /&gt;
4&amp;#160;&amp;#160;&amp;#160; 2.05000&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 2&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 0.45000&amp;#160;&amp;#160;&amp;#160; 2.05000&amp;#160;&amp;#160;&amp;#160;&amp;#160; NO&lt;br /&gt;
4&amp;#160;&amp;#160;&amp;#160; 2.00061&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 3&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 0.04939&amp;#160;&amp;#160;&amp;#160; 2.00061&amp;#160;&amp;#160;&amp;#160;&amp;#160; NO&lt;br /&gt;
4&amp;#160;&amp;#160;&amp;#160; 2.00000&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 4&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 0.00061&amp;#160;&amp;#160;&amp;#160; 2.00000&amp;#160;&amp;#160;&amp;#160;&amp;#160; NO&lt;br /&gt;
4&amp;#160;&amp;#160;&amp;#160; 2.00000&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 5&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 0.00000&amp;#160;&amp;#160;&amp;#160; &lt;font color=&#34;#ff0000&#34;&gt;2.00000&amp;#160;&amp;#160;&amp;#160;&amp;#160; NO&lt;/font&gt;&lt;br /&gt;
4&amp;#160;&amp;#160;&amp;#160; 2.00000&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 6&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 0.00000&amp;#160;&amp;#160; &lt;font color=&#34;#ff0000&#34;&gt;2.00000&lt;/font&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;font color=&#34;#ff0000&#34;&gt;YES &lt;/font&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What’s the difference between count 5 and 6 since their y values look the same? We reset the tolerance value to 1e-3 rather than 1e-8, and get the outputs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;x&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; y0&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; count&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; w&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; y&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; is_eq_sqrt&lt;/p&gt;

&lt;p&gt;4&amp;#160;&amp;#160;&amp;#160; 2.50000&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 1&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 1.50000&amp;#160;&amp;#160;&amp;#160; 2.50000&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; NO&lt;br /&gt;
4&amp;#160;&amp;#160;&amp;#160; 2.05000&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 2&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 0.45000&amp;#160;&amp;#160;&amp;#160; 2.05000&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; NO&lt;br /&gt;
4&amp;#160;&amp;#160;&amp;#160; 2.00061&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 3&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 0.04939&amp;#160;&amp;#160;&amp;#160; 2.00061&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; NO&lt;br /&gt;
4&amp;#160;&amp;#160;&amp;#160; 2.00000&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 4&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 0.00061&amp;#160;&amp;#160;&amp;#160; 2.00000&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; NO&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The system get a faster convergence at an higher error rate, with an approximated&amp;#160; value little away from sqrt(4).&lt;/p&gt;

&lt;p&gt;We should have a deep understanding of how SAS stores numeric values, which deserves a full session to discuss, to unearth the mystery. Some basic references:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;http://support.sas.com/documentation/cdl/en/lrcon/62955/HTML/default/a000695157.htm&#34;&gt;Numeric Precision in SAS Software&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;http://support.sas.com/techsup/technote/ts654.pdf&#34;&gt;Numeric Precision 101&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;http://support.sas.com/techsup/technote/ts230.html&#34;&gt;Dealing with Numeric Representation Error in SAS Applications&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>