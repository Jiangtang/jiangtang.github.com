<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Macro on Jiangtang Hu | 胡江堂</title>
    <link>/tags/macro/</link>
    <description>Recent content in Macro on Jiangtang Hu | 胡江堂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Nov 2013 10:10:21 +0000</lastBuildDate>
    
	<atom:link href="/tags/macro/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SAS Data Driven Programming: My 4 Favorite Techniques</title>
      <link>/2013/11/07/sas-data-driven-programming-my-4-favorite-techniques/</link>
      <pubDate>Thu, 07 Nov 2013 10:10:21 +0000</pubDate>
      
      <guid>/2013/11/07/sas-data-driven-programming-my-4-favorite-techniques/</guid>
      <description>I use relatively fixed patterns in my SAS&amp;#160; programming life. For so called data driven programming (or dynamic programming), I used the following 4 techniques, chronologically:
 macro array  call execute  list processing  for each loop   For a quick demo, I will start with a simple scenario in which the data set sashelp.zipcode should be spitted to pieces of datasets by states (in real projects, the codes would be more complicated but share the simple atom structure).</description>
    </item>
    
    <item>
      <title>Yet Another Instance of DoW-Loop</title>
      <link>/2013/08/07/yet-another-instance-of-dow-loop/</link>
      <pubDate>Wed, 07 Aug 2013 23:49:55 +0000</pubDate>
      
      <guid>/2013/08/07/yet-another-instance-of-dow-loop/</guid>
      <description>Just got another DoW-Loop example from SAS Sample #48582:
 http://support.sas.com/kb/48/582.html
 </description>
    </item>
    
    <item>
      <title>List Processing With SAS (1): List Creating I</title>
      <link>/2013/07/11/list-processing-with-sas-1-list-creating-i/</link>
      <pubDate>Thu, 11 Jul 2013 21:10:14 +0000</pubDate>
      
      <guid>/2013/07/11/list-processing-with-sas-1-list-creating-i/</guid>
      <description>Suppose you have 10 datasets, literally ds1, ds2, …ds10 and you need to concatenate them all. You may first get a quick shortcut set ds1-ds10. If such list members were generated dynamically (and may hold a form like ds1a, ds2a,… ds10a) , you will probably come out a macro solution:
 &amp;#160;&amp;#160; %macro doit; &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; data combine; &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; set %do i=1 %to &amp;n; ds&amp;amp;i %end; ; &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; run; &amp;#160;&amp;#160; %mend; &amp;#160;&amp;#160; %doit</description>
    </item>
    
    <item>
      <title>List Processing With SAS: A Github Repository</title>
      <link>/2013/03/31/list-processing-with-sas-a-github-repository/</link>
      <pubDate>Sun, 31 Mar 2013 22:24:02 +0000</pubDate>
      
      <guid>/2013/03/31/list-processing-with-sas-a-github-repository/</guid>
      <description>I have a function like macro (recursive version) to create a sequence:
 %macro _list(n,pre=ff);
%if &amp;amp;n=1 %then &amp;amp;pre.1;
%else %_list(%eval(&amp;amp;n-1)),&amp;amp;pre.&amp;n;
%mend _list;
%put %_list(3); *produces ff1, ff2, ff3;
 But when I read one of Ian Whitlock’s papers, Names, Names, Names &amp;#8211; Make Me a List (SGF 2007, SESUG 2008), I say: stop! I&amp;#8217;m gonna use Ian’s %range and I create Github page to hold it (with minimum modifications due to personal preference).</description>
    </item>
    
    <item>
      <title>Localize Your Macro Variable? Mostly Not Needed or Do It If You Only Want to Initiate It</title>
      <link>/2013/03/29/localize-your-macro-variable-mostly-not-needed-or-do-it-if-you-only-want-to-initiate-it/</link>
      <pubDate>Fri, 29 Mar 2013 19:22:46 +0000</pubDate>
      
      <guid>/2013/03/29/localize-your-macro-variable-mostly-not-needed-or-do-it-if-you-only-want-to-initiate-it/</guid>
      <description>[NOTE2013-05-30: This post is permanently suspended. In this post, I only focused on the initialization effect of the %local statement and totally ignored its function to avoid variable collisions as Quentin mentioned in comment box.]
A piece of SAS codes to create a list of all variables within a dataset (a nice programming trick from Art Carpenter, 2004):
 %macro getvars(dset) ;
%local varlist ;
%let fid = %sysfunc(open(&amp;amp;dset)) ;</description>
    </item>
    
    <item>
      <title>My SAS Books: Shopping List 2012</title>
      <link>/2012/12/07/my-sas-books-shopping-list-2012/</link>
      <pubDate>Fri, 07 Dec 2012 23:36:30 +0000</pubDate>
      
      <guid>/2012/12/07/my-sas-books-shopping-list-2012/</guid>
      <description>Last year I threw away all my SAS books (to friends and colleagues in Beijing) before moving to US. You might agree that it’s not economically bound to transport such heavy books intercontinentally! Now I just start to build my SAS library one by one. 
I will most probably not buy more SAS books as Christmas gifts for myself, so it’s time to take a 2012 snapshot of shopping:</description>
    </item>
    
    <item>
      <title>Extract the Version of SAS and OS of a SAS Format or Macro Catalog: A Little Bit of Perl Regular Expression</title>
      <link>/2012/11/25/extract-the-version-of-sas-and-os-of-a-sas-format-or-macro-catalog-a-little-bit-of-perl-regular-expression/</link>
      <pubDate>Sun, 25 Nov 2012 20:36:52 +0000</pubDate>
      
      <guid>/2012/11/25/extract-the-version-of-sas-and-os-of-a-sas-format-or-macro-catalog-a-little-bit-of-perl-regular-expression/</guid>
      <description>SAS Sample 34444(Determine the operating system in which a format catalog was created) posts piece of codes to get the version of SAS and OS of a SAS format catalog. It is useful since a SAS catalog can be only read in the operating systems same to its source machine.
2 cents add to this note:
First, we do not need to write codes to get to know the machine version for a catalog(formats.</description>
    </item>
    
    <item>
      <title>Macro Quoting in SAS Data Integration Studio</title>
      <link>/2012/11/19/macro-quoting-in-sas-data-integration-studio/</link>
      <pubDate>Mon, 19 Nov 2012 21:35:04 +0000</pubDate>
      
      <guid>/2012/11/19/macro-quoting-in-sas-data-integration-studio/</guid>
      <description>You can run the following piece of codes successfully in these 3 SAS programming environments:
 BASE SAS  Enterprise Guide: create a new “File-New-Program”  SAS Data Integration Studio: create a new “Tool-Code Editor”    %let species=&amp;ldquo;Setosa&amp;rdquo; &amp;ldquo;Versicolor&amp;rdquo;;
data a; &amp;#160;&amp;#160;&amp;#160; set sashelp.iris; &amp;#160;&amp;#160;&amp;#160; where species in (&amp;amp;species); run; 

 Then create a Transformation in SAS Data Integration Studio (DIS for short; I use version 4.</description>
    </item>
    
    <item>
      <title>A SAS 9.3 Macro Trick: %put &amp;amp;=var</title>
      <link>/2012/11/08/a-sas-9.3-macro-trick-put-ampvar/</link>
      <pubDate>Thu, 08 Nov 2012 20:09:50 +0000</pubDate>
      
      <guid>/2012/11/08/a-sas-9.3-macro-trick-put-ampvar/</guid>
      <description>This is new since SAS 9.3 on how to display macro variable name and its value. Try to run
 %let var=1,2,3; %put &amp;amp;=var;
 or
 %macro test(var); &amp;#160;&amp;#160;&amp;#160; %put &amp;amp;=var; %mend; %test(%str(1,2,3))
 and you will get in Log window
 VAR=1,2,3
 You can read from SAS 9.3 online doc:
 If you place an equal sign between the ampersand and the macro variable name of a direct macro variable reference, the macro variable&amp;#8217;s name displays in the log along with the macro variable&amp;#8217;s value.</description>
    </item>
    
    <item>
      <title>My Collection of SAS Macro Repositories</title>
      <link>/2011/11/08/my-collection-of-sas-macro-repositories/</link>
      <pubDate>Tue, 08 Nov 2011 21:41:54 +0000</pubDate>
      
      <guid>/2011/11/08/my-collection-of-sas-macro-repositories/</guid>
      <description>Then I just find that the most effective and safest way to synchronize bookmarks across machines is making them Google searchable, i.e, putting them online.
Followings are my personal collections of SAS macro Repositories (I will keep it update according to new sites reached and your inputs). Most of them are rich, well documented and friendly for navigation and review:
/*\*General**/
1. SAS Macros by Richard DeVenezia****
http://www.devenezia.com/downloads/sas/macros/index.php
Richard is a very active contributor in SAS-L.</description>
    </item>
    
  </channel>
</rss>