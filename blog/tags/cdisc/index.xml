<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CDISC on Jiangtang Hu | 胡江堂</title>
    <link>/tags/cdisc/</link>
    <description>Recent content in CDISC on Jiangtang Hu | 胡江堂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Sep 2014 21:59:02 +0000</lastBuildDate>
    
	<atom:link href="/tags/cdisc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Takeaway Materials From PharmaSUG SDE, Cary, NC</title>
      <link>/2014/09/29/takeaway-materials-from-pharmasug-sde-cary-nc/</link>
      <pubDate>Mon, 29 Sep 2014 21:59:02 +0000</pubDate>
      
      <guid>/2014/09/29/takeaway-materials-from-pharmasug-sde-cary-nc/</guid>
      <description>It’s the first PharmaSUG event I ever attended and it’s great and I plan to submit a paper for PharmaSUG 2015.
Honors belonged to Mike Molter and Lex Jansen for their hardcore talks on XML and CDISC Dataset-XML respectively. Dataset-XML is basically ODM based replacement of currently wildly used SAS Version 5 Transport File. It’s an emerging technology and it’s nice to check it out:
 CDISC Dataset-XML Resources @CDISC</description>
    </item>
    
    <item>
      <title>Record Qualifier v.s. Variable Qualifier</title>
      <link>/2014/03/18/record-qualifier-v.s.-variable-qualifier/</link>
      <pubDate>Tue, 18 Mar 2014 11:00:36 +0000</pubDate>
      
      <guid>/2014/03/18/record-qualifier-v.s.-variable-qualifier/</guid>
      <description>If you think it’s clear enough to differentiate record qualifier from variable qualifier as they were defined (in CDISC SDTM Version 1.3):
 Record Qualifiers define additional attributes of the observation record as a whole (rather than describing a particular variable within a record). Examples include &amp;#8211;REASND, AESLIFE, and all other SAE flag variables in the AE domain; AGE, SEX, and RACE in the DM domain; and &amp;#8211;BLFL, &amp;#8211;POS, &amp;#8211;LOC, &amp;#8211;SPEC, and &amp;#8211;NAM in a Findings domain</description>
    </item>
    
    <item>
      <title>A SAS Note for Length Limit of Strings in CDISC Datasets</title>
      <link>/2014/02/18/a-sas-note-for-length-limit-of-strings-in-cdisc-datasets/</link>
      <pubDate>Tue, 18 Feb 2014 23:37:22 +0000</pubDate>
      
      <guid>/2014/02/18/a-sas-note-for-length-limit-of-strings-in-cdisc-datasets/</guid>
      <description>Clinical programmers are very familiar with the length limit of strings in CDISC compliant datasets, such as
 #1: variable names: &amp;lt;= 8 characters #2: variable labels: &amp;lt;= 40 characters #3: data set labels: &amp;lt;= 40 characters #4: data value of a single variable: &amp;lt;= 200 characters  and they are due to the limitations of SAS XPORT transport files (v5). But there are some rules which are not&amp;#160; as explicit as rule #1-4, for example,</description>
    </item>
    
    <item>
      <title>What&amp;rsquo;s New</title>
      <link>/2013/03/20/whatrsquos-new/</link>
      <pubDate>Wed, 20 Mar 2013 23:09:08 +0000</pubDate>
      
      <guid>/2013/03/20/whatrsquos-new/</guid>
      <description>I didn’t blog for a while in this first half March and there are bunches of new stuff to catch up:
I had a new baby! He was delivered on time (and on budget!), lions tigers and bears, oh my&amp;#8230; His brother is Tiger so I named him, Leo.
And I got the latest SAS 9.3 (TS1M2) installed! SAS is jus getting much beautiful.

OpenCDISC had the latest release, Version 1.</description>
    </item>
    
    <item>
      <title>Github for Clinical/Statistical Programmers</title>
      <link>/2013/02/20/github-for-clinical/statistical-programmers/</link>
      <pubDate>Wed, 20 Feb 2013 22:01:03 +0000</pubDate>
      
      <guid>/2013/02/20/github-for-clinical/statistical-programmers/</guid>
      <description>PhUSE-FDA Working Group 5 (Development of Standard Scripts for Analysis and Programming) just adopted Google Code as collaborative programming platform. Google Code is one of the most popular and respected open source software hosting sites in the world and it is definitely a good choice for PhUSE-FDA WG5.
But after viewing one of WG5’s working reports, Sharing Standard Statistical Scripts and getting to know why they finally chose Google Code (rather than Github which was also tested by WG5 members), I think it’s necessary to clarify some misunderstanding against Github where I’m also an occasional user.</description>
    </item>
    
    <item>
      <title>The Great, Open, Vendor-neutral, Platform-independent Data Standards, . . . Yet in PDF Formats</title>
      <link>/2012/12/29/the-great-open-vendor-neutral-platform-independent-data-standards-.-.-.-yet-in-pdf-formats/</link>
      <pubDate>Sat, 29 Dec 2012 17:47:36 +0000</pubDate>
      
      <guid>/2012/12/29/the-great-open-vendor-neutral-platform-independent-data-standards-.-.-.-yet-in-pdf-formats/</guid>
      <description>You know I mean the CDISC standards including CDASH, SDTM, SEND, ADaM, … and you are right there are few not only in PDF format (ODM, define.xml for example).
Today Jozef (Jos) Aerts from XML4Pharma posted his frustration of copying and pasting metadata from only PDF-formed SDTM-IG 3.1.4.&amp;#160; I hate to complain the volunteer work by the CDISC team but it is worth a discussion, is there any better way to publish CDISC Standards?</description>
    </item>
    
    <item>
      <title>My SAS Books: Shopping List 2012</title>
      <link>/2012/12/07/my-sas-books-shopping-list-2012/</link>
      <pubDate>Fri, 07 Dec 2012 23:36:30 +0000</pubDate>
      
      <guid>/2012/12/07/my-sas-books-shopping-list-2012/</guid>
      <description>Last year I threw away all my SAS books (to friends and colleagues in Beijing) before moving to US. You might agree that it’s not economically bound to transport such heavy books intercontinentally! Now I just start to build my SAS library one by one. 
I will most probably not buy more SAS books as Christmas gifts for myself, so it’s time to take a 2012 snapshot of shopping:</description>
    </item>
    
    <item>
      <title>Is There Any Better Way? Publishing Process For CDISC Standards Documentation</title>
      <link>/2012/07/19/is-there-any-better-way-publishing-process-for-cdisc-standards-documentation/</link>
      <pubDate>Thu, 19 Jul 2012 01:54:10 +0000</pubDate>
      
      <guid>/2012/07/19/is-there-any-better-way-publishing-process-for-cdisc-standards-documentation/</guid>
      <description>&amp;#160; 1. The Pain I read from Lex Jansen (@LexJansen) that CDISC SDTM v1.3 and SDTMIG v3.1.3 were newly released. It’s pretty nice since CDISC SDTM was supposed to be released semiannually in the new publishing cycle. We can see the team put great efforts on this new version, but frankly speaking, this delivery (the way to display, not the content itself) is far away elegant.
The new SDTM Implementation Guide (IG) v1.</description>
    </item>
    
    <item>
      <title>Blogging is Awesome: CDISC Bloggers</title>
      <link>/2012/05/04/blogging-is-awesome-cdisc-bloggers/</link>
      <pubDate>Fri, 04 May 2012 22:42:32 +0000</pubDate>
      
      <guid>/2012/05/04/blogging-is-awesome-cdisc-bloggers/</guid>
      <description>I remember when blogging was cool.
Before the specializing and monetizing and Twitter-izing.
&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &amp;#8212;Peter Dewolf
 Well I think blogging is still cool (and awesome_ and _awesome …). The most appealing personal reason is, blog posts are Google searchable and suitable for archive while Tweets NOT. Admittedly I hold some sort of&amp;#160; Existentialism 2.0: 
 if it is not Google searched, it doesn’t exit!
 Last month I placed a post on how to keep pace with CDISC&amp;#160;from its official channels and I feel cool to add an appendix of source from the awesome blogosphere.</description>
    </item>
    
    <item>
      <title>OpenCDISC Validator V1.3: An Unboxing Review (1): counting issue</title>
      <link>/2012/03/31/opencdisc-validator-v1.3-an-unboxing-review-1-counting-issue/</link>
      <pubDate>Sat, 31 Mar 2012 16:58:00 +0000</pubDate>
      
      <guid>/2012/03/31/opencdisc-validator-v1.3-an-unboxing-review-1-counting-issue/</guid>
      <description>The lasted OpenCDISC Validator version 1.3 was released at 29 March, 2012 (btw, there is a typo in the Line 1 of CHANGELOG.txt within the package: “2012” not “2011”). As usual, you can submit the following SAS scripts to get some basic information(remember to customize your directory):   filename CDISC url &#34;https://raw.github.com/Jiangtang/Programming-SAS/master/Rules_Count_OpenCDISC_XML.sas&#34;;  %include CDISC;  %Rules_Count_OpenCDISC_XML(dir=C:OpenCDISC1.3compareopencdisc-validator_1.3config)   and you get a summary of validation rules of OpenCDISC Validator V1.</description>
    </item>
    
    <item>
      <title>Fetch CDISC Control Terminology Files in NCI Vocabulary Repository: All in One Click</title>
      <link>/2012/03/30/fetch-cdisc-control-terminology-files-in-nci-vocabulary-repository-all-in-one-click/</link>
      <pubDate>Fri, 30 Mar 2012 00:23:17 +0000</pubDate>
      
      <guid>/2012/03/30/fetch-cdisc-control-terminology-files-in-nci-vocabulary-repository-all-in-one-click/</guid>
      <description>CDISC Control Terminology is the most frequent updated model among CDISC standards. Take SDTM as example, the latest SDTM terminologies released at 23 March 2012; and from 2009 to 2011, there were 15 different SDTM terminology versions! If you just rely on your own local repository, you might miss the pace somehow.
Here is a simple approach. Just submit the following one line of codes in a shell,
 wget http://evs.</description>
    </item>
    
    <item>
      <title>Quick Notes on RTP CDISC User&amp;rsquo;s Group Q1 Meeting</title>
      <link>/2012/03/28/quick-notes-on-rtp-cdisc-userrsquos-group-q1-meeting/</link>
      <pubDate>Wed, 28 Mar 2012 00:43:03 +0000</pubDate>
      
      <guid>/2012/03/28/quick-notes-on-rtp-cdisc-userrsquos-group-q1-meeting/</guid>
      <description>It’s my first time to attend a local event, RTP (Research Triangle Park) CDISC User’s Group meeting, Q1 and here are some quick notes.
1. people Almost fresh faces for me. It’s nice to meet Jack Shostak of Duke Clinical Research Institute again. I visited him in Duke last year after SAS Global Forum in Las Vegas. Jack has a forthcoming book on SAS and CDISC, Implementing CDISC Using SAS: An End-to-End Guide.</description>
    </item>
    
    <item>
      <title>GitHub and Weekend Programming</title>
      <link>/2012/02/19/github-and-weekend-programming/</link>
      <pubDate>Sun, 19 Feb 2012 16:17:32 +0000</pubDate>
      
      <guid>/2012/02/19/github-and-weekend-programming/</guid>
      <description>Yihui of Iowa State just texted me that GitHub is programmers’ Facebook. Inspired by him(great thanks!), I also begin to play with GitHub now:
 https://github.com/Jiangtang
 Currently I only created one repo as personal SAS code repository. To kill weekend time, I uploaded piece of codes to count the OpenCDISC validation rules by models. To use it:
 filename CDISC url “https://raw.github.com/Jiangtang/Programming-SAS/master/Rules_Count_OpenCDISC_XML.sas”;
%include CDISC;
%Rules_Count_OpenCDISC_XML(dir=C:tempOpenCDISCsoftwareopencdisc-validatorconfig)
 while get:</description>
    </item>
    
    <item>
      <title>Face Off: Review OpenCDISC XML files</title>
      <link>/2012/02/11/face-off-review-opencdisc-xml-files/</link>
      <pubDate>Sat, 11 Feb 2012 16:35:35 +0000</pubDate>
      
      <guid>/2012/02/11/face-off-review-opencdisc-xml-files/</guid>
      <description>OpenCDISC, the first open source CDISC validator, is already in the toolbox of FDA reviewers (CDER/CBER, see CDISC Standards in the Regulatory Submission Process, 26 January 2012, P.33). The key features in OpenCDISC is a dichotomy of validation rules (XML based) and application logic. Currently OpenCDISC Validator (Version 1.2.1) officially supports the four following CDISC modules:
 SDTM 3.1.2 SDTM 3.1.1 Define.xml 1.0 ADaM 1.0  
You can get the corresponding configuration files (validation rules) online or in the software folder (in .</description>
    </item>
    
    <item>
      <title>Dive into CDISC Express (5): Generate and Validate SDTM domains and define.xml</title>
      <link>/2011/07/07/dive-into-cdisc-express-5-generate-and-validate-sdtm-domains-and-define.xml/</link>
      <pubDate>Thu, 07 Jul 2011 22:32:03 +0000</pubDate>
      
      <guid>/2011/07/07/dive-into-cdisc-express-5-generate-and-validate-sdtm-domains-and-define.xml/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/2011/06/28/dive-into-cdisc-express-1-introductory/&#34;&gt;&lt;em&gt;Dive into CDISC Express (1): Introductory&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/2011/07/02/dive-into-cdisc-express-2-create-a-new-study/&#34;&gt;Dive into CDISC Express (2): Create a New Study&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/2011/07/03/dive-into-cdisc-express-3-navigate-mapping-file/&#34;&gt;Dive into CDISC Express (3): Navigate mapping file&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;_&lt;a href=&#34;http://www.jiangtanghu.com/blog/2011/07/04/dive-into-cdisc-express-4-data-manipulation-techniques-2/&#34; target=&#34;_blank&#34;&gt;Dive into CDISC Express (4): Data manipulation techniques&lt;/a&gt;_&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A more friendly PDF version of these all CDISC Express series is also available in&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://jiangtanghu.com/docs/en/CDISCExpress.pdf&#34; title=&#34;http://jiangtanghu.com/docs/en/CDISCExpress.pdf&#34;&gt;http://jiangtanghu.com/docs/en/CDISCExpress.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The following tasks, such as generating SDTM domains and define.xml, need just some clicking button work in CDISC Express using a well designed mapping file. Few words needed due to the software.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dive into CDISC Express (4): Data manipulation techniques</title>
      <link>/2011/07/04/dive-into-cdisc-express-4-data-manipulation-techniques/</link>
      <pubDate>Mon, 04 Jul 2011 20:52:42 +0000</pubDate>
      
      <guid>/2011/07/04/dive-into-cdisc-express-4-data-manipulation-techniques/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/2011/06/28/dive-into-cdisc-express-1-introductory/&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Dive into CDISC Express (1): Introductory&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;_&lt;a href=&#34;http://www.jiangtanghu.com/blog/2011/07/02/dive-into-cdisc-express-2-create-a-new-study/&#34; target=&#34;_blank&#34;&gt;Dive into CDISC Express (2): Create a New Study&lt;/a&gt;_&lt;/p&gt;

&lt;p&gt;_&lt;a href=&#34;http://www.jiangtanghu.com/blog/2011/07/03/dive-into-cdisc-express-3-navigate-mapping-file/&#34; target=&#34;_blank&#34;&gt;Dive into CDISC Express (3): Navigate mapping file&lt;/a&gt;_&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;4-3-data-manipulation-techniques-in-cdisc-express&#34;&gt;4.3 Data manipulation techniques in CDISC Express&lt;/h3&gt;

&lt;p&gt;CDISC Express supplies relative rich sets of data manipulation techniques assembling with SAS languages used for data mapping. Following is a not limited listing and I will keep it updated.&lt;/p&gt;

&lt;h3 id=&#34;4-3-1-reference-one-dataset&#34;&gt;4.3.1 Reference one dataset&lt;/h3&gt;

&lt;p&gt;A raw dataset name appear in “Dataset” column indicate a “set” operation in SAS.&lt;/p&gt;

&lt;p&gt;All dataset options can be used when referencing a dataset, such as&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;siteinv(drop=invcode)&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;siteinv(rename=(invcode=inv))&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;siteinv(where=(invcode ne “”))&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can also reference an external dataset. You should incorporate the external file in spreadsheet with name beginning with an underscore, “_”, and “_visits” in this case:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/07/clip_image001.gif&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;clip_image001&#34; border=&#34;0&#34; alt=&#34;clip_image001&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/07/clip_image001_thumb.gif&#34; width=&#34;434&#34; height=&#34;302&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you can use it in any domains needed, e.g., TV domain:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/07/clip_image003.jpg&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;clip_image003&#34; border=&#34;0&#34; alt=&#34;clip_image003&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/07/clip_image003_thumb.jpg&#34; width=&#34;493&#34; height=&#34;244&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is a macro &lt;font color=&#34;#ff0000&#34;&gt;%cpd_importlist&lt;/font&gt; used to import the external dataset, “_visits”. Again, this macro roots in &lt;strong&gt;C:Program FilesCDISC Expressmacrosfunction_library&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Using a macro call to re-sharp or modify an input dataset offers great flexibility referencing data. We will also discuss the benefits later on.&lt;/p&gt;

&lt;h3 id=&#34;4-3-2-assignment&#34;&gt;4.3.2 Assignment&lt;/h3&gt;

&lt;p&gt;You can assign a number, string and a dataset variable with any valid SAS functions to a SDTM domain variable in “Expression” column.&lt;/p&gt;

&lt;p&gt;Sometimes a temporary variable needed for later calculation. You can produce such temporary variable in “Dataset” column with an assignment in the “Expression” column just similar with any other domain variables. Two differences: first, such temporary variables named begin with an asterisk, “*”; second, all temporary variables will not be included in the final domain. Once created, such temporary variables can be used for any other expressions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/07/clip_image005.jpg&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;clip_image005&#34; border=&#34;0&#34; alt=&#34;clip_image005&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/07/clip_image005_thumb.jpg&#34; width=&#34;494&#34; height=&#34;312&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are three special symbols used in “Dataset” column of CDISC Express. Asterisk, “*” indicates a temporary variable, while other two are&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tilde, “~” : indicate a variable used for supplemental domain (SUPPQUAL).&lt;/p&gt;

&lt;p&gt;Number sign, “#”: indicate a variable used for comments domain (CO).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another symbol, at sign, “@”, used in “Expression” column, indicated referencing a variables produced before:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/07/clip_image006.gif&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;clip_image006&#34; border=&#34;0&#34; alt=&#34;clip_image006&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/07/clip_image006_thumb.gif&#34; width=&#34;448&#34; height=&#34;104&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this case, “AGEU” uses “AGE” as input, while “AGE” is calculated before. “@AGE” just indicates the dependency. In concept, it looks like the “calculated” option in SAS PROC SQL:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&lt;b&gt;proc&lt;/b&gt; &lt;b&gt;sql&lt;/b&gt; ;&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;select (AvgHigh &amp;#8211; &lt;b&gt;32&lt;/b&gt;) * &lt;b&gt;5&lt;/b&gt;/&lt;b&gt;9&lt;/b&gt; as HighC , &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;(AvgLow &amp;#8211; &lt;b&gt;32&lt;/b&gt;) * &lt;b&gt;5&lt;/b&gt;/&lt;b&gt;9&lt;/b&gt; as LowC ,&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;(calculated HighC &amp;#8211; calculated LowC)&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;as Range &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;from temps;&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&lt;b&gt;quit&lt;/b&gt;;&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;4-3-3-match-merging&#34;&gt;4.3.3 Match-merging&lt;/h3&gt;

&lt;p&gt;We already got a math-merging example before. If “all” appears as a dataset in the “Dataset” column, all the previous datasets should be merged first for later processing by the common key specified in “Merge Key” column. If no key assigned, patient ID is used by the system.&lt;/p&gt;

&lt;p&gt;CDISC Express also supports two types of join, inner join and outer join (left, right, full) using data steps. The implementation has slightly difference with standard SQL, but the ideas are same.&lt;/p&gt;

&lt;p&gt;We add a new column, “Join”, usually beside the “Merge Key” column.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/07/clip_image008.jpg&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;clip_image008&#34; border=&#34;0&#34; alt=&#34;clip_image008&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/07/clip_image008_thumb.jpg&#34; width=&#34;442&#34; height=&#34;377&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are two values for “Join”, “O” or “I” while “O” stands for “outer join” and “I”, “inner join”. A join indicator “I” equals a dataset option “in=” in action while “O” means no. Use the above as illustration, the corresponding SAS codes behind look like&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;courier new&#34;&gt;&lt;b&gt;data&lt;/b&gt; temp;&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;courier new&#34;&gt;merge demog(in=a) siteinv(in=b);&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;courier new&#34;&gt;by sitecode;&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;courier new&#34;&gt;if b;&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;courier new&#34;&gt;&lt;b&gt;run&lt;/b&gt;;&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is so called “right outer join”. The combination of “I” and “O” in these two datasets can perform all the four types of join, one inner join and three outer join:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/07/in.png&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;in&#34; border=&#34;0&#34; alt=&#34;in&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/07/in_thumb.png&#34; width=&#34;499&#34; height=&#34;313&#34; /&gt;&lt;/a&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;As we could see, if no “Join” column specified, CDISC Express will perform inner join by default.&lt;/p&gt;

&lt;p&gt;So far CDISC Express cannot support multiply merge keys. For example, the following file is illegal currently:&lt;/p&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;
  &lt;table border=&#34;1&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34;&gt;
    &lt;tr&gt;
      &lt;td valign=&#34;top&#34; width=&#34;138&#34;&gt;
        &lt;p&gt;
          &lt;b&gt;Dataset &lt;/b&gt;
        &lt;/p&gt;
      &lt;/td&gt;
      
      &lt;td valign=&#34;top&#34; width=&#34;203&#34;&gt;
        &lt;p&gt;
          &lt;b&gt;Merge Key&lt;/b&gt;
        &lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td valign=&#34;top&#34; width=&#34;138&#34;&gt;
        &lt;p&gt;
          arm&amp;#160;&amp;#160;&amp;#160;
        &lt;/p&gt;
      &lt;/td&gt;
      
      &lt;td valign=&#34;top&#34; width=&#34;203&#34;&gt;
        &lt;p&gt;
          siteid, grpno
        &lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td valign=&#34;top&#34; width=&#34;138&#34;&gt;
        &lt;p&gt;
          armdescri
        &lt;/p&gt;
      &lt;/td&gt;
      
      &lt;td valign=&#34;top&#34; width=&#34;203&#34;&gt;
        &lt;p&gt;
          siteid, grpno
        &lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
  
  &lt;p&gt;
    The developer Romain indicated that such enhancements would be raised to the next round of product road map and he also proposed a work around. To use multiple keys for merging, we can create a temporary variable holding such multiple keys as a concatenation then this temporary variable can be used as a single merging key.
  &lt;/p&gt;
  

&lt;p&gt;&lt;h3&gt;
    4.3.4 Concatenating
  &lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Above we discussed lots about “merge” operation in CDISC Express. This section dedicated for “set” operation. We already know how to “set” one dataset for referencing, but how to “set” multiple datasets, i.e, “Concatenating”?
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Symmetrically, an “all” appears in “Dataset” column indicating merging operation, an “all (stack)” indicates concatenating operation:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/07/clip_image014.jpg&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;clip_image014&#34; border=&#34;0&#34; alt=&#34;clip_image014&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/07/clip_image014_thumb.jpg&#34; width=&#34;493&#34; height=&#34;396&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    The above file can be also translated to SAS codes for better understanding:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dive into CDISC Express (3): Navigate mapping file</title>
      <link>/2011/07/03/dive-into-cdisc-express-3-navigate-mapping-file/</link>
      <pubDate>Sun, 03 Jul 2011 21:19:18 +0000</pubDate>
      
      <guid>/2011/07/03/dive-into-cdisc-express-3-navigate-mapping-file/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/2011/06/28/dive-into-cdisc-express-1-introductory/&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Dive into CDISC Express (1): Introductory&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/2011/07/02/dive-into-cdisc-express-2-create-a-new-study/&#34; target=&#34;_blank&#34;&gt;Dive into CDISC Express (2): Create a New Study&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;4-step-2-of-6-generate-mapping-file&#34;&gt;4. Step 2 of 6: Generate mapping file&lt;/h2&gt;

&lt;p&gt;Generating template (blank) mapping file only needs pieces of effort by submitting &lt;em&gt;generate_mapping_template.sas&lt;/em&gt;. The toughest one is to fill it with mapping rules according to specified study.&lt;/p&gt;

&lt;h3 id=&#34;4-1-get-the-blank-template-mapping-file-generate-mapping-template-sas&#34;&gt;4.1 Get the blank template mapping file (generate_mapping_template.sas)&lt;/h3&gt;

&lt;p&gt;To get the blank template mapping file, just fill the one line of macro call in generate_mapping_template.sas:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;%createmapping(filespec=SDTM_Specs_3_1_1.xls, Dom=CM AE TV, req=YES, perm=YES, exp=YES);&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also, you can specify SDTM implementation version, 3.1.1 or 3.1.2. For domains (&amp;amp;Dom), DM, CO and SUPPQUAL will be created automatically; you should list others accordingly:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;SDTM 3.1.1: SV CM EX AE DS MH DV EG IE LB PE QS SC VS TV TI XD SU XR XS XE TR (Total: 22)&lt;/p&gt;

&lt;p&gt;SDTM 3.1.2: AE CE CM DA DS DV EG EX FA IE LB MB MH MS PC PE PP QS SC SE SU SV TA TE TI TS TV VS (Total: 28)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You should also choose the “CORE” variable (REQUIRED, PERMISSIBLE and EXPECTED) by triggering &amp;amp;req, &amp;amp;perm, and &amp;amp;exp to “YES” or “NO”. Note that&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;REQUIRED and EXPECTED variables must always be included (req=YES, exp=YES);&lt;/p&gt;

&lt;p&gt;PERMISSIBLE variables included if needed (perm=YES or perm=NO)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Submit &lt;em&gt;generate_mapping_template.sas&lt;/em&gt; and you can get a blank template mapping file tmpmapping.xls in &lt;strong&gt;C:Program FilesCDISC Expresstemp&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/07/clip_image002.jpg&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px&#34; title=&#34;clip_image002&#34; border=&#34;0&#34; alt=&#34;clip_image002&#34; align=&#34;left&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/07/clip_image002_thumb.jpg&#34; width=&#34;478&#34; height=&#34;436&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy it to &lt;strong&gt;C:Program FilesCDISC ExpressstudiesCLINCAPdocMapping file &amp;#8211; working version&lt;/strong&gt; for example used for study “CLINCAP” and then fill all the blank columns (it NEEDS efforts!).&lt;/p&gt;

&lt;p&gt;If this mapping file passes the validation process, a final version named mapping.xls will be copied automatically to &lt;strong&gt;C:Program FilesCDISC ExpressstudiesCLINCAPdocMapping file &amp;#8211; validated version&lt;/strong&gt; for later processing.&lt;/p&gt;

&lt;p&gt;Note that if you already have some validated mapping file for other studies, it would serve as a good start rather than using the blank template from the scratch.&lt;/p&gt;

&lt;h2 id=&#34;4-2-navigate-mapping-file&#34;&gt;4.2 Navigate mapping file&lt;/h2&gt;

&lt;p&gt;Let’s take a look at the “real” worked mapping file for a demo study first, in &lt;strong&gt;C:Program FilesCDISC Expressstudiesexample1docMapping file &amp;#8211; working version&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The first sheet is a welcome dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/07/clip_image004.jpg&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;clip_image004&#34; border=&#34;0&#34; alt=&#34;clip_image004&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/07/clip_image004_thumb.jpg&#34; width=&#34;498&#34; height=&#34;292&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then StudyMetadata sheet, a XML metadata specification used to generate define.xml. you need only add some information in “Values” column:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/07/clip_image006.jpg&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;clip_image006&#34; border=&#34;0&#34; alt=&#34;clip_image006&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/07/clip_image006_thumb.jpg&#34; width=&#34;491&#34; height=&#34;377&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The FORMAT sheet:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/07/clip_image007.gif&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;clip_image007&#34; border=&#34;0&#34; alt=&#34;clip_image007&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/07/clip_image007_thumb.gif&#34; width=&#34;501&#34; height=&#34;324&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Such format structure is similar with the one we export the format from a format catalog using&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&lt;b&gt;proc&lt;/b&gt; &lt;b&gt;format&lt;/b&gt; library=library cntlout=format_out;&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&lt;b&gt;run&lt;/b&gt;;&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In most production environment, programmers get formats from clinical data management group. If the entire formats are assigned into proper libraries (work or library), you don’t need to export such formats into this spreadsheet. Of course in the format sheet, you can type some customized format.&lt;/p&gt;

&lt;p&gt;A typical domain sheet (AT LAST!) that needs efforts and our understanding of the software, DM for example:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/07/clip_image009.jpg&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;clip_image009&#34; border=&#34;0&#34; alt=&#34;clip_image009&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/07/clip_image009_thumb.jpg&#34; width=&#34;480&#34; height=&#34;439&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the ‘Dataset’ column, three raw datasets from &lt;strong&gt;C:Program FilesCDISC Expressstudiesexample1source&lt;/strong&gt; needed to map into DM domain, demog, siteinv and eligassess. Note that you can use any data step options such as drop=, rename=, where= for the input datasets.&lt;/p&gt;

&lt;p&gt;At the last of ‘Dataset’ column, “all” indicates that all the previous datasets mentioned above should be merged together for final processing.&lt;/p&gt;

&lt;p&gt;In the ‘Merge Key’ column, ‘sitecode’ is designed to datasets demog and siteinv which means demog and siteinv should be merged by the common key, ‘sitecode’.&lt;/p&gt;

&lt;p&gt;As we mentioned, all the previous datasets should be merged at last. But there is no common key settled in the ‘Merge Key’ column. It is a common rule: if no key specified for merge, USUBJID is used by default.&lt;/p&gt;

&lt;p&gt;The third column is ‘CDISC variable’, which list all the needed variables according to implementation version. An important note: you do not need to implement all the variables according to the order as they appear in the blank template mapping file. In the previous blank file, “AGE” in DM domain is ordered in Line 12, but in this working file, “AGE” is calculated in the second last order. The variable order of final DM domain will be as same as the blank one.&lt;/p&gt;

&lt;p&gt;It makes sense in practice. For example, the sequential variable, e.g. AESEQ is ordered after USUBJID, but you can only get the sequential number when all other variables well done. So SEQ variables are always computed in the final stage in a working mapping file.&lt;/p&gt;

&lt;p&gt;“Expression” column specify the mapping rule from raw datasets to SDTM domains. Assignments, expressions and macro calls (rooted in &lt;strong&gt;C:Program FilesCDISC Expressmacrosfunction_library&lt;/strong&gt;) are allowed in this column and most of them are straightforward. We will discuss more in the following section.&lt;/p&gt;

&lt;p&gt;Sum up, we can “translate” this mapping sheet to SAS codes for better understanding of CDISC Express architecture:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dive into CDISC Express (2): Create a New Study</title>
      <link>/2011/07/02/dive-into-cdisc-express-2-create-a-new-study/</link>
      <pubDate>Sat, 02 Jul 2011 21:21:22 +0000</pubDate>
      
      <guid>/2011/07/02/dive-into-cdisc-express-2-create-a-new-study/</guid>
      <description>Dive into CDISC Express (1): Introductory
 3. Step 1 of 6: Create a new study (create_new_study.sas) Open create_new_study.sas in C:Program FilesCDISC Expressprograms, you can see only one line of a macro call:
 %addnewstudy(studyname=my new study);
 Just assign a study name to the macro variable, &amp;amp;studyname, e.g, “CLINCAP”:
 %addnewstudy(studyname= CLINCAP);
 Submit the codes, you can find a folder named “CLINCAP” with the same structure as the two demo studies imbedded in this application(example1 and example2) in C:Program FilesCDISC Expressstudies, see(the left and right panels are folders and files before and after the execution of create_new_study.</description>
    </item>
    
    <item>
      <title>Dive into CDISC Express (1): Introductory</title>
      <link>/2011/06/28/dive-into-cdisc-express-1-introductory/</link>
      <pubDate>Tue, 28 Jun 2011 21:24:33 +0000</pubDate>
      
      <guid>/2011/06/28/dive-into-cdisc-express-1-introductory/</guid>
      <description>Recently I did for my personal project some research on Clinovo’s open source application, CDISC Express, a SAS application based on Excel framework designed to map clinical data to CDISC SDTM domains automatically. Not perfect yet, but it is easily understandable and practically usable after few hours’ of exploration of user guide. And most important, it is on the right way: an automatic CDISC converter is the magic weapon in almost every clinical programmer’s dream.</description>
    </item>
    
    <item>
      <title>CDISC Express: A Glance</title>
      <link>/2011/05/16/cdisc-express-a-glance/</link>
      <pubDate>Mon, 16 May 2011 00:48:31 +0000</pubDate>
      
      <guid>/2011/05/16/cdisc-express-a-glance/</guid>
      <description>This weekend I tested an application that can automatically transform clinical data to CDISC SDTM compliant datasets(3.1.1 and 3.1.2), CDISC Express of Clinovo. According to its license statements, you can download it for free and for personal use only.
The core of CDISC Express is an Excel configuration file called Mapping File which defines all the metadata and mapping rules required by CDISC SDTM standard. Then a set of SAS macros is used to</description>
    </item>
    
    <item>
      <title>XML and SAS</title>
      <link>/2010/10/07/xml-and-sas/</link>
      <pubDate>Thu, 07 Oct 2010 11:44:38 +0000</pubDate>
      
      <guid>/2010/10/07/xml-and-sas/</guid>
      <description>Last month, I gave a talk, XML: the SAS Approach, in CDISC Interchange China 2010(at the Medical School of Fudan University, Shanghai, 2010-09-15). FDA favors CDISC and HL7, the two XML based standards, and SAS programmers in biopharmaceutical industry&amp;#160; need incorporate the XML technology into their toolboxes. Fortunately, you don’t need to be an XML expert then to play XML in your daily work, and, SAS system DOES offer multiple tools and applications to handle XML files, i.</description>
    </item>
    
  </channel>
</rss>