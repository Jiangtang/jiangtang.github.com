<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Jiangtang Hu | 胡江堂</title>
    <link>/tags/python/index.xml</link>
    <description>Recent content in Python on Jiangtang Hu | 胡江堂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>In Search of Lost Time: 2016</title>
      <link>/2017/02/17/in-search-of-lost-time-2016/</link>
      <pubDate>Fri, 17 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/02/17/in-search-of-lost-time-2016/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;div id=&#34;title&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;title&lt;/h2&gt;
&lt;p&gt;2016 was gone, and I didn’t even leave one sigle blog post.&lt;/p&gt;
&lt;p&gt;efete fef ee f efef&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Use List Object in SAS: Yet Another Undocumented Feature in SAS 9.4</title>
      <link>/2014/04/01/use-list-object-in-sas-yet-another-undocumented-feature-in-sas-9.4/</link>
      <pubDate>Tue, 01 Apr 2014 23:42:24 +0000</pubDate>
      
      <guid>/2014/04/01/use-list-object-in-sas-yet-another-undocumented-feature-in-sas-9.4/</guid>
      <description>

&lt;p&gt;Last year I gave a talk in SESUG 2013 on &lt;a href=&#34;http://analytics.ncsu.edu/sesug/2013/BtB-18.pdf&#34;&gt;list manipulation on SAS using a collection of function-like macros&lt;/a&gt;. Today I just explored in my recently upgraded SAS 9.4 that I can play with list natively, which means I can create a list, slice a list and do other list operations in Data Steps! This is not documented yet(which means it will not be supported by the software vendor) and I can see warning message in Log window like “WARNING: List object is preproduction in this release”,  and it is still limited somehow, so use it in your own risk (and of course, fun).  Adding such versatile list object will definitely make SAS programmers more powerful. I will keep watch its further development.&lt;/p&gt;

&lt;p&gt;*&lt;strong&gt;*&lt;/strong&gt;*&lt;strong&gt;*&lt;/strong&gt;*&lt;strong&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt;Update&lt;/span&gt;&lt;/strong&gt;*&lt;strong&gt;*&lt;/strong&gt;**&lt;/p&gt;

&lt;p&gt;Some readers emailed to me that they can’t get the expected results as I did here. I think it’s best to check your own system:&lt;/p&gt;

&lt;p&gt;I. Make sure you use the latest SAS software. I only tested on a 64-bit Window 7 machine with SAS 9.4 TS1M1:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2014/04/SAS94.png&#34;&gt;&lt;img style=&#34;background-image: none; float: none; padding-top: 0px; padding-left: 0px; margin: 3px auto 5px; display: block; padding-right: 0px; border-width: 0px;&#34; title=&#34;SAS94&#34; alt=&#34;SAS94&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2014/04/SAS94_thumb.png&#34; width=&#34;442&#34; height=&#34;186&#34; border=&#34;0&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;II. Make sure all hotfixes were applied (You can use this &lt;a href=&#34;http://ftp.sas.com/techsup/download/hotfix/HF2/SASHFADD.html&#34;&gt;SAS Hot Fix Analysis, Download and Deployment Tool&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2014/04/hotfix.png&#34;&gt;&lt;img style=&#34;background-image: none; float: none; padding-top: 0px; padding-left: 0px; margin: 3px auto 5px; display: block; padding-right: 0px; border-width: 0px;&#34; title=&#34;hotfix&#34; alt=&#34;hotfix&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2014/04/hotfix_thumb.png&#34; width=&#34;432&#34; height=&#34;252&#34; border=&#34;0&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;*&lt;strong&gt;*&lt;/strong&gt;*&lt;strong&gt;*&lt;/strong&gt;*&lt;strong&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt;Update End&lt;/span&gt;&lt;/strong&gt;*&lt;strong&gt;*&lt;/strong&gt;**&lt;/p&gt;

&lt;p&gt;The followings are some quick plays and I will report more after more research:&lt;/p&gt;

&lt;h2 id=&#34;1-create-a-list&#34;&gt;1. Create a List&lt;/h2&gt;

&lt;p&gt;It’s easy to create a list:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span style=&#34;font-family: &#39;Courier New&#39;;&#34;&gt;data &lt;em&gt;null&lt;/em&gt;;&lt;br /&gt; a = [&amp;#8216;apple&amp;#8217;, &amp;#8216;orange&amp;#8217;, &amp;#8216;banana&amp;#8217;];&lt;br /&gt; put a;&lt;br /&gt; run;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;the output in Log window:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2014/04/list1.png&#34;&gt;&lt;img style=&#34;background-image: none; float: none; padding-top: 0px; padding-left: 0px; margin: 3px auto 5px; display: block; padding-right: 0px; border-width: 0px;&#34; title=&#34;list1&#34; alt=&#34;list1&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2014/04/list1_thumb.png&#34; width=&#34;448&#34; height=&#34;84&#34; border=&#34;0&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also transfer a string to a list:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span style=&#34;font-family: &#39;Courier New&#39;;&#34;&gt;data &lt;em&gt;null&lt;/em&gt;;&lt;br /&gt; a = &amp;#8216;SAS94&amp;#8217;&lt;br /&gt; b =list(a)&lt;br /&gt; put b;&lt;br /&gt; run;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2014/04/list2.png&#34;&gt;&lt;img style=&#34;background-image: none; float: none; padding-top: 0px; padding-left: 0px; margin: 3px auto 5px; display: block; padding-right: 0px; border-width: 0px;&#34; title=&#34;list2&#34; alt=&#34;list2&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2014/04/list2_thumb.png&#34; width=&#34;460&#34; height=&#34;80&#34; border=&#34;0&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-slice-a-list&#34;&gt;2. Slice a List&lt;/h2&gt;

&lt;p&gt;Slicing a list is also pretty straightforward, like in R and Python:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span style=&#34;font-family: &#39;Courier New&#39;;&#34;&gt;data &lt;em&gt;null&lt;/em&gt;;&lt;br /&gt; a = [&amp;#8216;apple&amp;#8217;, &amp;#8216;orange&amp;#8217;, &amp;#8216;banana&amp;#8217;];&lt;br /&gt; b = a[0];&lt;br /&gt; c = a[:-1];&lt;br /&gt; d = a[1:2];&lt;br /&gt; put a;&lt;br /&gt; put b;&lt;br /&gt; put c;&lt;br /&gt; put d;&lt;br /&gt; run;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2014/04/list3.png&#34;&gt;&lt;img style=&#34;background-image: none; float: none; padding-top: 0px; padding-left: 0px; margin: 3px auto 5px; display: block; padding-right: 0px; border-width: 0px;&#34; title=&#34;list3&#34; alt=&#34;list3&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2014/04/list3_thumb.png&#34; width=&#34;406&#34; height=&#34;110&#34; border=&#34;0&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-list-is-immutable-in-sas&#34;&gt;3. List is Immutable in SAS!?&lt;/h2&gt;

&lt;p&gt;I felt much confortable to play list operations in SAS but a weird thing just happened. I tried to change a value in a list:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span style=&#34;font-family: &#39;Courier New&#39;;&#34;&gt;data &lt;em&gt;null&lt;/em&gt;;&lt;br /&gt; a = [&amp;#8216;apple&amp;#8217;, &amp;#8216;orange&amp;#8217;, &amp;#8216;banana&amp;#8217;];&lt;br /&gt; a[0] = &amp;#8216;Kivi&amp;#8217;;&lt;br /&gt; put a;&lt;br /&gt; run;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unexpectedly, I got an error:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2014/04/list4.png&#34;&gt;&lt;img style=&#34;background-image: none; float: none; padding-top: 0px; padding-left: 0px; margin: 3px auto 5px; display: block; padding-right: 0px; border-width: 0px;&#34; title=&#34;list4&#34; alt=&#34;list4&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2014/04/list4_thumb.png&#34; width=&#34;443&#34; height=&#34;76&#34; border=&#34;0&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;hhh, I need to create a new list to hold such modification? This is funny.&lt;/p&gt;

&lt;p&gt;Based on my quick exploration, the list object in SAS is pretty intuitive from a programmers’ point of view. But since it’s undocumented and I don’t know how long it will stay in “preproduction” phase,  just be careful to implement it in your production work.&lt;/p&gt;

&lt;p&gt;Personally I feel very exciting to “hack” such wonderful list features in SAS 9.4. If well implemented, it will easily beat R and Python (which claim themselves supporting rich data types and objects) as a scripting language for SAS programmers. I will keep update in &lt;a href=&#34;http://en.wikipedia.org/wiki/April_1&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello Python</title>
      <link>/2011/10/31/hello-python/</link>
      <pubDate>Mon, 31 Oct 2011 20:29:43 +0000</pubDate>
      
      <guid>/2011/10/31/hello-python/</guid>
      <description>&lt;p&gt;Inspired by &lt;a href=&#34;http://www.jiangtanghu.com/blog/2011/08/15/sas-bloggers-in-action-2-jian-dai-and-his-sas-academy/&#34; target=&#34;_blank&#34;&gt;Jian’s polyglot programming practice&lt;/a&gt;, I also begin to brush up Python and C++ which I learned during graduate school. Following is a Python response to one of &lt;a href=&#34;http://tech.groups.yahoo.com/group/sas_academy/&#34; target=&#34;_blank&#34;&gt;Jian Dai&lt;/a&gt;’s former programming challenges for &lt;a href=&#34;http://blog.clinovo.com/megha-becomes-the-third-time-winner-june-programming-challenge-now-is-finished/&#34; target=&#34;_blank&#34;&gt;lines count of source codes&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;[cce lang=&amp;#8221;python&amp;#8221;]&lt;/p&gt;

&lt;p&gt;import os&lt;/p&gt;

&lt;p&gt;#count number of lines of&lt;/p&gt;

&lt;p&gt;#single file&lt;/p&gt;

&lt;p&gt;def lineCount(fileName):&lt;/p&gt;

&lt;p&gt;countSingle=0&lt;/p&gt;

&lt;p&gt;for line in open(fileName):&lt;/p&gt;

&lt;p&gt;countSingle += 1&lt;/p&gt;

&lt;p&gt;return countSingle&lt;/p&gt;

&lt;p&gt;#count number of lines of&lt;/p&gt;

&lt;p&gt;#directory and subdirectories&lt;/p&gt;

&lt;p&gt;def dirCount(dir,extension):&lt;/p&gt;

&lt;p&gt;countTotal=0&lt;/p&gt;

&lt;p&gt;for r,d,f in os.walk(dir):&lt;/p&gt;

&lt;p&gt;for files in f:&lt;/p&gt;

&lt;p&gt;if files.endswith(extension):&lt;/p&gt;

&lt;p&gt;fileName=os.path.join(r,files)&lt;/p&gt;

&lt;p&gt;countSingle=lineCount(fileName)&lt;/p&gt;

&lt;p&gt;countTotal += countSingle&lt;/p&gt;

&lt;p&gt;return countTotal&lt;/p&gt;

&lt;p&gt;a=dirCount(&amp;#8220;C:/Program Files/CDISC Express/&amp;#8221;,&amp;#8221;.sas&amp;#8221;)&lt;/p&gt;

&lt;p&gt;print a&lt;/p&gt;

&lt;p&gt;[/cc]&lt;/p&gt;

&lt;p&gt;I use &lt;a href=&#34;http://www.jiangtanghu.com/docs/en/readME_IDE.txt&#34; target=&#34;_blank&#34;&gt;python-2.7.2&lt;/a&gt;, the final Python 2.x release most because of the various modules support for learning purpose. The book helps me to get the quick review of Python is _&lt;a href=&#34;http://greenteapress.com/thinkpython/thinkpython.html&#34; target=&#34;_blank&#34;&gt;Think Python: How to Think Like a Computer Scientist&lt;/a&gt;_ by Allen Downey.&lt;/p&gt;

&lt;p&gt;Also, I begin to use &lt;a href=&#34;http://kpumuk.info/projects/wordpress-plugins/codecolorer/&#34; target=&#34;_blank&#34;&gt;CodeColorer&lt;/a&gt; for this blog to insert codes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Map and Reduce in MapReduce: a SAS Illustration</title>
      <link>/2011/10/04/map-and-reduce-in-mapreduce-a-sas-illustration/</link>
      <pubDate>Tue, 04 Oct 2011 21:31:18 +0000</pubDate>
      
      <guid>/2011/10/04/map-and-reduce-in-mapreduce-a-sas-illustration/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;http://www.jiangtanghu.com/blog/2011/09/14/analytical-valley/&#34; target=&#34;_blank&#34;&gt;last post&lt;/a&gt;, I mentioned &lt;a href=&#34;http://hadoop.apache.org/&#34;&gt;Hadoop&lt;/a&gt;, the open source implementation of Google’s &lt;a href=&#34;http://en.wikipedia.org/wiki/Mapreduce&#34; target=&#34;_blank&#34;&gt;MapReduce&lt;/a&gt; for parallelized processing of big data. In this long National Holiday, I read the original Google paper, _&lt;a href=&#34;http://static.googleusercontent.com/external_content/untrusted_dlcp/labs.google.com/en//papers/mapreduce-osdi04.pdf&#34; target=&#34;_blank&#34;&gt;MapReduce: Simplified Data Processing on Large Clusters&lt;/a&gt;_ by Jeffrey Dean and Sanjay Ghemawat and got that the terminologies of “map” and “reduce” were basically borrowed from Lisp, an old functional language that I even didn’t play “hello world” with. For Python users, the idea of Map and Reduce is also very straightforward because the workhorse data structure in Python is just the list, a sequence of values that you can just imagine that they are the nodes(clusters, chunk servers, …) in a distributed system.&lt;/p&gt;

&lt;p&gt;MapReduce is a programming framework and really language independent, so SAS users can also get the basic idea from their daily programming practices and here is just a simple illustration using data step array (not array in Proc FCMP or matrix in IML). Data step array in SAS is fundamentally not a data structure but a convenient way of processing group of variables, but it can also be used to play some list operations like in Python and other rich data structure supporting languages(an editable version can be founded in &lt;a href=&#34;http://jiangtanghu.com/docs/en/MapReduce.sas&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/10/MapReduce.png&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px&#34; title=&#34;MapReduce&#34; border=&#34;0&#34; alt=&#34;MapReduce&#34; align=&#34;left&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/10/MapReduce_thumb.png&#34; width=&#34;506&#34; height=&#34;535&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow code above, the programming task is to capitalize a string “Hadoop” (Line 2) and the “master” method is just to capitalize the string in buddle(Line 8): just use a master machine to processing the data.&lt;/p&gt;

&lt;p&gt;Then we introduce the idea of “big data” that the string is too huge to one master machine, so “master method” failed. Now we distribute the task to thousands of low cost machines (workers, slaves, chunk servers,&amp;hellip; in this case, the one dimensional array with size of 6, see Line 11), each machine produces parts of the job (each array element only capitalizes a single letter in sequence, see Line 12-14). Such distributing operation is called “&lt;font color=&#34;#ff0000&#34;&gt;map&lt;/font&gt;”. In a MapReduce system, a master machine is also needed to assign the maps and reduce.&lt;/p&gt;

&lt;p&gt;How about “&lt;font color=&#34;#ff0000&#34;&gt;reduce&lt;/font&gt;”?&amp;#160; A “reduce” operation is also called “fold”—for example, in Line 17, the operation to combine all the separately values into a single value: combine results from multiple worker machines.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Too Big to Be Accurate(1): Which is the Most Powerful Calculator in the World?</title>
      <link>/2011/01/22/too-big-to-be-accurate1-which-is-the-most-powerful-calculator-in-the-world/</link>
      <pubDate>Sat, 22 Jan 2011 17:05:17 +0000</pubDate>
      
      <guid>/2011/01/22/too-big-to-be-accurate1-which-is-the-most-powerful-calculator-in-the-world/</guid>
      <description>&lt;p&gt;Calculate the factorial of 171 (171!)? Just TRY! It is equal to 171*170*169*….2*1.&lt;/p&gt;

&lt;h3 id=&#34;1-google-calculator&#34;&gt;1. Google calculator&lt;/h3&gt;

&lt;p&gt;As Google fanatics, I first try to search the answer via Google:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/Google171.png&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;Google171&#34; border=&#34;0&#34; alt=&#34;Google171&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/Google171_thumb.png&#34; width=&#34;336&#34; height=&#34;116&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Whoops, nothing interested returned! Type “170!” and get the output:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/Google170.png&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;Google170&#34; border=&#34;0&#34; alt=&#34;Google170&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/Google170_thumb.png&#34; width=&#34;244&#34; height=&#34;110&#34; /&gt;&lt;/a&gt; Why kinda things happened in this calculator? 171! is just equal to 171*170!.&lt;/p&gt;

&lt;h3 id=&#34;2-excel&#34;&gt;2. Excel&lt;/h3&gt;

&lt;p&gt;Switch to Excel spreadsheet. Function fact(*) used:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/Excel170.png&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;Excel170&#34; border=&#34;0&#34; alt=&#34;Excel170&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/Excel170_thumb.png&#34; width=&#34;228&#34; height=&#34;66&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/Excel171.png&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;Excel171&#34; border=&#34;0&#34; alt=&#34;Excel171&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/Excel171_thumb.png&#34; width=&#34;244&#34; height=&#34;64&#34; /&gt;&lt;/a&gt; Oo, interesting. The same.&lt;/p&gt;

&lt;h3 id=&#34;3-sas&#34;&gt;3. SAS&lt;/h3&gt;

&lt;p&gt;Google and Excel may be the niche players in calculators’ family. Why not try to use some programming languages?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;As a SAS programmer, my handy tool is SAS of course.&lt;/p&gt;

&lt;p&gt;First, I use &lt;strong&gt;SAS data step&lt;/strong&gt; with its build-in function fact(*):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;data &lt;em&gt;null&lt;/em&gt;; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; x=fact(170); &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; y=fact(171); &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; put x= y=; &lt;br /&gt;run;&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and I get&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: Invalid argument to function FACT at line 49 column 7.&lt;br /&gt;
&lt;font color=&#34;#ff0000&#34;&gt;x=7.257416E306 y=.&lt;/font&gt;&lt;br /&gt;
&lt;font color=&#34;#ff0000&#34;&gt;x=7.257416E306 y=. &lt;em&gt;ERROR&lt;/em&gt;=1 &lt;em&gt;N&lt;/em&gt;=1&lt;/font&gt;&lt;br /&gt;
NOTE: Mathematical operations could not be performed at the following places. The results of the operations have been set to missing values.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Expected or unexpected? I don’t know how this fact(*) function is defined, and&amp;#160; try to define a function to calculate the factorials by myself. In SAS 9.2, you can use &lt;strong&gt;PROC FCMP&lt;/strong&gt;(also available at 9.1.3 as a experimental procedure):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;proc fcmp outlib = work.funcs.math ; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; function factorial(k) ; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; if k = 0 then return(1) ; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; z = k ; *preserve k ; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; x = factorial(k-1) ; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; k = z ; *recover k ; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; k = k * x ; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; return(k) ; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; endsub ; &lt;br /&gt;quit ; &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;options cmplib=work.funcs ; &lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Use this self-defined function to get 170!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;proc fcmp ; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; x = factorial (170) ; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; put x = ; &lt;br /&gt;run ; &lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The FCMP procedure returns&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;x=7.257416E306&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Try to calculate 171! ?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;proc fcmp ; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; y = factorial (171) ; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; put y = ; &lt;br /&gt;run ;&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just get the overflow error. The interaction stops at 170!:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ERROR: An overflow occurred during execution in function &amp;#8216;factorial&amp;#8217; in statement number 7 at&amp;#160;&amp;#160; line 10 column 1.&lt;br /&gt;
&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; The statement was:&lt;br /&gt;
&amp;#160;&amp;#160;&amp;#160; 1&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; (10:1)&amp;#160;&amp;#160;&amp;#160; k = (k=171) * (&lt;font color=&#34;#ff0000&#34;&gt;x=7.257416E306&lt;/font&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The above function definitions use recursion. Recursion may have some limitation on efficiency. We could try the loop without recursion. &lt;strong&gt;SAS/IML&lt;/strong&gt; doesn’t support recursion. Let SAS/IML to the court:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;proc iml; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; start factorial (n); &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; fact=1; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; do i=1 to n; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; fact=fact*i; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; end; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; return (fact); &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; finish factorial;&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&amp;#160;&amp;#160;&amp;#160; x= factorial (170); &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; print x;&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&amp;#160;&amp;#160;&amp;#160; y= factorial (171); &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; print y; &lt;br /&gt;quit;&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, I get 170!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#160;&amp;#160;&amp;#160; x&lt;br /&gt;
7.257E306&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and a overflow error for 171!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; y= factorial (171);&lt;br /&gt;
ERROR: Overflow error in *.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Turing, Von Neumann and Tony, what happened?&lt;/p&gt;

&lt;h3 id=&#34;4-r&#34;&gt;4. R&lt;/h3&gt;

&lt;p&gt;When SAS failed, lots of voices pop up: use R! OK, Rction!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font color=&#34;#ff0000&#34;&gt;&amp;gt; x=factorial(170);x&lt;/font&gt;&lt;br /&gt;
[1] 7.257416e+306&lt;br /&gt;
&lt;font color=&#34;#ff0000&#34;&gt;&amp;gt; y=factorial(171);y&lt;/font&gt;&lt;br /&gt;
Warning message:&lt;br /&gt;
In factorial(171) : value out of range in &amp;#8216;gammafn&amp;#8217;&lt;br /&gt;
[1] Inf&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;5-c&#34;&gt;5. C++&lt;/h3&gt;

&lt;p&gt;I don’t want to lose my patience. Think C++(use both recursive and non-recursive methods):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;#include &lt;iostream&gt; &lt;br /&gt;using namespace std; &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;double factRecursive(double num); &lt;br /&gt;double factNonRecursive(double num); &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;int main() &lt;br /&gt;{ &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; cout&amp;lt;&lt;endl;&amp;#160;&amp;#160;&amp;#160; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; cout&amp;lt;&amp;lt;&amp;ldquo;Recursive: the factorial of 170 is &amp;ldquo;&amp;lt;&lt;factRecursive(170)&lt;&lt;endl; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; cout&amp;lt;&amp;lt;&amp;ldquo;Recursive: the factorial of 171 is &amp;ldquo;&amp;lt;&lt;factRecursive(171)&lt;&lt;endl; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; cout&amp;lt;&lt;endl;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&amp;#160;&amp;#160;&amp;#160; cout&amp;lt;&amp;lt;&amp;ldquo;NonRecursive: the factorial of 170 is &amp;ldquo;&amp;lt;&lt;factNonRecursive(170)&lt;&lt;endl; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; cout&amp;lt;&amp;lt;&amp;ldquo;NonRecursive: the factorial of 171 is &amp;ldquo;&amp;lt;&lt;factNonRecursive(171)&lt;&lt;endl; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; cout&amp;lt;&lt;endl;&amp;#160;&amp;#160;&amp;#160; &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;return 0; &lt;br /&gt;} &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;double factRecursive (double num) &lt;br /&gt;{ &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; if (num==0) &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; return 1; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; else &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; return num*factRecursive(num-1); &lt;br /&gt;} &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;double factNonRecursive (double num) &lt;br /&gt;{ &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; double fact=1; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; for (double i=2;i&amp;lt;=num;i++) fact *=i; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; return fact; &lt;br /&gt;}&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unfortunately, same story once more:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/Cpp.png&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;Cpp&#34; border=&#34;0&#34; alt=&#34;Cpp&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/Cpp_thumb.png&#34; width=&#34;449&#34; height=&#34;121&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well. The story&amp;#8217;s played out like this. It may be not the limitable of the language but the machine. I check which is the largest numbers my computer supports:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;#include &lt;iostream&gt; &lt;br /&gt;#include &lt;cfloat&gt; &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;using namespace std; &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;int main() &lt;br /&gt;{ &lt;br /&gt;&amp;#160; cout&amp;lt;&amp;lt;&amp;ldquo;maxinum double value of machine: &amp;ldquo;&amp;lt;&lt;DBL_MAX&lt;&lt;endl; &lt;br /&gt;&amp;#160; return 0; &lt;/font&gt;&lt;font face=&#34;Courier New&#34;&gt;}&lt;/font&gt;&lt;/p&gt;

&lt;pre&gt;maxinum double value of machine: &lt;font color=&#34;#ff0000&#34;&gt;1.79769e+308&lt;/font&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now everything’s in the open. The factorial of 170 is about 7.257416e+306. 171! is too big to be supported by my PC.&lt;/p&gt;

&lt;p&gt;(Note: I put these codes in &lt;a href=&#34;http://codepad.org&#34;&gt;http://codepad.org&lt;/a&gt;, a online complier. if you don’t have any C++ complier in your machine, you can see the codes and outputs in:&lt;a href=&#34;http://codepad.org/xnneavsw&#34;&gt;http://codepad.org/xnneavsw&lt;/a&gt;&amp;#160; and &lt;a href=&#34;http://codepad.org/3FeEC9t2&#34;&gt;http://codepad.org/3FeEC9t2&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&#34;6-a-href-http-www-wolframalpha-com-target-blank-wolframalpha-a&#34;&gt;6. &lt;a href=&#34;http://www.wolframalpha.com/&#34; target=&#34;_blank&#34;&gt;WolframAlpha&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Struggled for hours, I turn to &lt;a href=&#34;http://www.wolframalpha.com&#34; target=&#34;_blank&#34;&gt;WolframAlpha&lt;/a&gt; computing platform. It returns &lt;a href=&#34;http://www.wolframalpha.com/input/?i=171!&#34; target=&#34;_blank&#34;&gt;the factorial of 171&lt;/a&gt; AT LAST:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/WA171.gif&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;WA171&#34; border=&#34;0&#34; alt=&#34;WA171&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/WA171_thumb.gif&#34; width=&#34;454&#34; height=&#34;128&#34; /&gt;&lt;/a&gt;&amp;#160;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/WA171_s.gif&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;WA171_s&#34; border=&#34;0&#34; alt=&#34;WA171_s&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/WA171_s_thumb.gif&#34; width=&#34;477&#34; height=&#34;52&#34; /&gt;&lt;/a&gt;&amp;#160; AT LAST we know the factorial of 171 has 310 digits.&lt;/p&gt;

&lt;h3 id=&#34;7-windows-calculator&#34;&gt;7. Windows Calculator&lt;/h3&gt;

&lt;p&gt;I try to use Windows build-in calculator. Amazing, it is powerful:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/winCalc.png&#34;&gt;&lt;img style=&#34;border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto&#34; title=&#34;winCalc&#34; border=&#34;0&#34; alt=&#34;winCalc&#34; src=&#34;http://www.jiangtanghu.com/blog/wp-content/uploads/2011/01/winCalc_thumb.png&#34; width=&#34;323&#34; height=&#34;250&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;8-python&#34;&gt;8. Python&lt;/h3&gt;

&lt;p&gt;Return to programming language.&amp;#160; First, I defined a function(recursive version) in Python and then use its MATH library:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def factorial(n):&lt;br /&gt; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; if n==0: &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;
  &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; return 1
&lt;/p&gt;

&lt;p&gt;
  &amp;#160;&amp;#160;&amp;#160; else:
&lt;/p&gt;

&lt;p&gt;
  &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; return n*factorial(n-1) &lt;/font&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;font face=&#34;Courier New&#34;&gt;&lt;font color=&#34;#ff0000&#34;&gt;&gt;&gt;&gt; factorial(170)&lt;/font&gt; &lt;/p&gt; 
  

&lt;p&gt;&lt;p&gt;
    7257415615307998967396728211129263114716991681296451376
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    5435777989005618434017061578523507492426174595114909912
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    3783852077666602256544275302532890077320751090240043028
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    0058295603966612599658257104398558294257568966313439612
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    2625710949468067112055688804571933402126614528000000000
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    00000000000000000000000000000000L
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;font color=&#34;#ff0000&#34;&gt;&amp;gt;&amp;gt;&amp;gt; factorial(171)&lt;/font&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    1241018070217667823424840524103103992616605577501693185
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    3889518036119960752216917529927519781204875855764649595
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    0167038705280988985869071076733124203221848436431047357
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    7889968548278290754541561964852153468318044293239598173
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    6968996572359039476161522785581800611763651084288000000
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    00000000000000000000000000000000000L&lt;/font&gt;
  &lt;/p&gt;&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;
    &lt;p&gt;
      &amp;gt;&amp;gt;&amp;gt; import math&lt;br /&gt; &lt;br /&gt;&lt;font color=&#34;#ff0000&#34;&gt;&amp;gt;&amp;gt;&amp;gt; math.factorial(171)&lt;/font&gt;
    &lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;
  1241018070217667823424840524103103992616605577501693185
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
  3889518036119960752216917529927519781204875855764649595
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
  0167038705280988985869071076733124203221848436431047357
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
  7889968548278290754541561964852153468318044293239598173
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
  6968996572359039476161522785581800611763651084288000000
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
  00000000000000000000000000000000000L
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Amazing, Python beats up C++!
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;em&gt;(to be continued :&lt;/em&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;em&gt;Too Big to Be Accurate(2): &lt;font color=&#34;#ff0000&#34;&gt;Approximation&lt;/font&gt; &lt;/em&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;em&gt;)&lt;/em&gt;
  &lt;/p&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>