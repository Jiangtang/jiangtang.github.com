<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Matrix on Lithium Theme</title>
    <link>/tags/matrix/index.xml</link>
    <description>Recent content in Matrix on Lithium Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/tags/matrix/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Incorporate SAS/IML to Base SAS?</title>
      <link>/2012/10/16/incorporate-sas/iml-to-base-sas/</link>
      <pubDate>Tue, 16 Oct 2012 22:28:41 +0000</pubDate>
      
      <guid>/2012/10/16/incorporate-sas/iml-to-base-sas/</guid>
      <description>&lt;p&gt;&lt;font size=&#34;1&#34;&gt;Since SAS 9.3, ODS Graphics was moved into Base SAS and other statistical procedures, which means the SAS/Graph license is not needed anymore to access ODS Graphics facilities. It’s definitely nice, but from customers’ point of view, it is not critical necessary: since the “minimum set of SAS system” in most SAS sessions includes the Base SAS, SAS/Stat and SAS/Graph, there is almost no impact for SAS users to switch the license of ODS Graphics. Actually, I do think SAS/IML is better to be included in BASE SAS (play Proc IML in BASE SAS; a MATRIX statement in data step is definitely another bonus) :&lt;/font&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;font size=&#34;1&#34;&gt;IML itself, seems have no intention to replace SAS/Stat, SAS/ETS, SAS/QC and other SAS statistical facilities in matrix way like R or Matlab. Instead, by enhancing the abilities to call SAS data steps(including macros), SAS Procedures and R inside,&amp;#160; IML seems to be glad as glue to leverage multiple programming elements. &lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font size=&#34;1&#34;&gt;BASE SAS is a collection of lots of programming elements: data step, macro, SQL, array, hash, Java objects, ODS, XML and bunches of procedures. IML is clearly a programming tool rather than a specific application(SAS/Stat and such) and if it is added to BASE SAS, then the SAS programmers&amp;#160; will have one more data structure (matrix) to play with besides SAS table (R copies this idea as data frame), array and hash table (dictionary).&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font size=&#34;1&#34;&gt;Actually it is an emergent need (for a matrix). Processing different rows in variable(s) is not an easy task in SAS data steps. Mostly SAS programmers utilize arrays (plus some tricky functions like LAG and DIF) and Dow-loop after its advent. There are really advanced programming techniques, but in matrix with index, such manipulation is pretty easy and straightforward (and saving your loops).&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font size=&#34;1&#34;&gt;Although IML can communicate with BASE SAS, but for portable purpose (IML is not expected in every SAS session), most SAS programmers prefer to submit pure BASE codes for data processing. Furthermore, we can even understand why SAS programmers in general invest less in IML. It’s not good: just think about a BASE SAS programmer without a handy matrix manipulation tool (&lt;em&gt;and think about R&lt;/em&gt;)!&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;font size=&#34;1&#34;&gt;Personally I played IML for a while and still keep eyes on its updates. But since I had some SAS machines without IML, I realize that IML can’t be used as a production language in my clinical SAS programming life: just can’t afford the latency&amp;#160; to ask IT administrators (including in clients side) to manage it!&lt;/font&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Play Matrix within SAS(1): basic files processing</title>
      <link>/2010/10/29/play-matrix-within-sas1-basic-files-processing/</link>
      <pubDate>Fri, 29 Oct 2010 21:02:31 +0000</pubDate>
      
      <guid>/2010/10/29/play-matrix-within-sas1-basic-files-processing/</guid>
      <description>

&lt;p&gt;Recently I read Rick Wicklin’s &lt;a href=&#34;http://blogs.sas.com/iml/index.php&#34;&gt;IML blog&lt;/a&gt; with great interests(and anticipation for his fore-coming IML book,&amp;#160; &lt;em&gt;&lt;a href=&#34;http://support.sas.com/publishing/authors/wicklin.html&#34;&gt;Statistical Programming with SAS/IML Software&lt;/a&gt;&lt;/em&gt;). SAS programmers have the following programming tools to facilitate their daily work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SAS data step: the basic SAS; a generation IV programming language, similar with other procedural languages such as C.&lt;/li&gt;
&lt;li&gt;SAS Proc SQL: SAS’s implementation of standard SQL(&lt;a href=&#34;http://en.wikipedia.org/wiki/SQL-92&#34;&gt;SQL-92&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;SAS IML(Interactive Matrix Language): SAS’s matrix manipulation language(like R and Matlab).&amp;#160; SAS IML Studio also supply IMLPlus programming language(IML+), an enhanced version of IML.&lt;/li&gt;
&lt;li&gt;SAS SCL(SAS Component Language): build in SAS/AF software, an object oriented programming(OOP) language for applications development.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am a heavy user of data steps and SQL and want to invest some bit on matrix manipulation. Although other wonderful languages available(such as R and Matlab), I found IML is a good choice for SAS programmers like me. It is well integrated within SAS system, and very important, almost all of the SAS Base functions and call routines are also supported by IML. Here some notes of IML 101(codes are self explanatory from a SAS Base point of view):&lt;/p&gt;

&lt;h1 id=&#34;1-iml-style-of-hello-world&#34;&gt;&lt;strong&gt;1. IML style of ‘hello world’&lt;/strong&gt;&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&lt;font color=&#34;#ff0000&#34;&gt;proc iml&lt;/font&gt;; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; text=&amp;ldquo;Hello World!&amp;rdquo;; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &lt;font color=&#34;#ff0000&#34;&gt;print&lt;/font&gt; &amp;ldquo;IML saying&amp;rdquo; text; &lt;br /&gt;&lt;font color=&#34;#ff0000&#34;&gt;quit&lt;/font&gt;;&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and you got in output window:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;IML saying Hello World!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Like Proc SQL, IML begins with “&lt;font face=&#34;Courier New&#34;&gt;&lt;font color=&#34;#ff0000&#34;&gt;proc iml&lt;/font&gt;&lt;/font&gt;” , end with ”&lt;font color=&#34;#ff0000&#34;&gt;quit&lt;/font&gt;”, and every statements end with a semicolon. The key word “&lt;font color=&#34;#ff0000&#34;&gt;print&lt;/font&gt;” (an IML statement), just like “put” statement in data steps.&lt;/p&gt;

&lt;p&gt;An enhanced version of Hello World:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&lt;font color=&#34;#ff0000&#34;&gt;options &lt;/font&gt;nocenter nodate nonumber; &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;proc iml; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &lt;font color=&#34;#ff0000&#34;&gt;reset&lt;/font&gt; printall; &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&amp;#160;&amp;#160;&amp;#160; text=&amp;ldquo;Hello World!&amp;rdquo;; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; print &amp;ldquo;in &amp;amp;sysdate. IML saying&amp;rdquo; text; &lt;br /&gt;quit;&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some SAS global options added(“&lt;font face=&#34;Courier New&#34;&gt;nocenter nodate nonumber&lt;/font&gt;”). The IML statement “&lt;font color=&#34;#ff0000&#34;&gt;reset&lt;/font&gt;&amp;rdquo;, works like “&lt;font face=&#34;Courier New&#34;&gt;&lt;font color=&#34;#ff0000&#34;&gt;options&lt;/font&gt;&lt;/font&gt;” statement to set some processing options within the IML(and you can guess the meaning of the options “printall”, just print all&amp;hellip; it is your turn to check the output window).&lt;/p&gt;

&lt;p&gt;A SAS system macro variable “&amp;amp;sysdate” is presented to encourage you to add any programming elements in SAS Base to IML.&lt;/p&gt;

&lt;h1 id=&#34;2-how-to-create-a-matrix-manually&#34;&gt;&lt;strong&gt;2. How to create a matrix manually&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Actually, we have already create a matrix named “text” in the previous hello-world codes. It is a character &lt;font color=&#34;#ff0000&#34;&gt;scalar&lt;/font&gt;(matrix with only one element). If we want to avoid the SAS data steps’ style of assignment,&amp;#160; we can use &lt;font color=&#34;#ff0000&#34;&gt;&lt;em&gt;{}&lt;/em&gt;&lt;/font&gt; to enclose matrix elements:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a={“a”};&amp;#160; /*a _char_ scalar */&lt;br /&gt;
b={1};&amp;#160;&amp;#160;&amp;#160;&amp;#160; /*a _num_ scalar*/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and a 2*3 matrix:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;c={1 2 3&lt;font color=&#34;#ff0000&#34;&gt;, &lt;br /&gt;&lt;/font&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 2 3 4}; /*2 rows, 3 cols*/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Commas(&lt;font color=&#34;#ff0000&#34;&gt;,&lt;/font&gt;) are used to separate rows.&lt;/p&gt;

&lt;h1 id=&#34;3-how-to-create-a-matrix-by-functions&#34;&gt;3. How to create a matrix by functions&lt;/h1&gt;

&lt;p&gt;Some matrix reshaping functions:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;a=&lt;font color=&#34;#ff0000&#34;&gt;I&lt;/font&gt;(3);&amp;#160;&amp;#160;&amp;#160;&amp;#160; /*creates a 3&lt;em&gt;3 identity matrix&lt;/em&gt;/ &lt;br /&gt;b=&lt;font color=&#34;#ff0000&#34;&gt;J&lt;/font&gt;(2,3,5); /*creates a 2&lt;em&gt;3 matrix of identical values&lt;/em&gt;/ &lt;br /&gt;e=&lt;font color=&#34;#ff0000&#34;&gt;do&lt;/font&gt;(1,9,2); /&lt;em&gt;produces series, from 1 to 9, by increment 2&lt;/em&gt;/ &lt;br /&gt;c=&lt;font color=&#34;#ff0000&#34;&gt;block&lt;/font&gt;(a,b);/&lt;em&gt;forms a block-diagonal matrice&lt;/em&gt;/ &lt;br /&gt;d=&lt;font color=&#34;#ff0000&#34;&gt;diag&lt;/font&gt;(a);&amp;#160;&amp;#160; /&lt;em&gt;creates a diagonal matrix&lt;/em&gt;/ &lt;br /&gt;m=&lt;font color=&#34;#ff0000&#34;&gt;repeat&lt;/font&gt;(a,4,3); /*create a (3&lt;em&gt;4)&lt;/em&gt;(3&lt;em&gt;3) matrix by repeating&lt;/em&gt;/ &lt;br /&gt;n=&lt;font color=&#34;#ff0000&#34;&gt;T&lt;/font&gt;(b);&amp;#160;&amp;#160; /&lt;em&gt;transpose&lt;/em&gt;/&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;4-how-to-create-a-matrix-by-reading-a-sas-data-set&#34;&gt;4. How to create a matrix by reading a SAS data set&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;proc iml; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &lt;font color=&#34;#ff0000&#34;&gt;use&lt;/font&gt; sashelp.class; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &lt;font color=&#34;#ff0000&#34;&gt;read&lt;/font&gt; all var &lt;font color=&#34;#ff0000&#34;&gt;&lt;em&gt;char&lt;/em&gt;&lt;/font&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;font color=&#34;#ff0000&#34;&gt;into&lt;/font&gt; class_char; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; read all var &lt;font color=&#34;#ff0000&#34;&gt;&lt;em&gt;num&lt;/em&gt;&lt;/font&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; into class_num; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; read all var &lt;font color=&#34;#ff0000&#34;&gt;{&amp;ldquo;Age&amp;rdquo; &amp;ldquo;Height&amp;rdquo; &amp;ldquo;Weight&amp;rdquo;}&lt;/font&gt; into class_num2; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &lt;font color=&#34;#ff0000&#34;&gt;close&lt;/font&gt; sashelp.class; &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&amp;#160;&amp;#160;&amp;#160; print class_char class_num class_num2; &lt;br /&gt;quit;&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that it is a good habit to close the data file after reading or using it(&lt;em&gt;see&lt;/em&gt; Rick Wicklin’s &lt;em&gt;&lt;a href=&#34;http://blogs.sas.com/iml/index.php?/archives/8-Five-Reasons-to-CLOSE-Your-Data-Sets.html&#34;&gt;Five Reasons to CLOSE Your Data Sets&lt;/a&gt;&lt;/em&gt;).&lt;/p&gt;

&lt;h1 id=&#34;5-how-to-output-a-matrix-to-sas-dataset&#34;&gt;5. How to output a matrix to SAS dataset&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;proc iml; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; use sashelp.class; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; read all var &lt;em&gt;num&lt;/em&gt; into class_num; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; close sashelp.class; &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&amp;#160;&amp;#160;&amp;#160; &lt;font color=&#34;#ff0000&#34;&gt;create&lt;/font&gt; work.class_num &lt;font color=&#34;#ff0000&#34;&gt;from&lt;/font&gt; class_num; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &lt;font color=&#34;#ff0000&#34;&gt;append&lt;/font&gt; &lt;font color=&#34;#ff0000&#34;&gt;from&lt;/font&gt; class_num; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &lt;font color=&#34;#ff0000&#34;&gt;show datasets&lt;/font&gt;; &lt;br /&gt;quit;&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;160&#34;&gt;&amp;#160;&lt;/h1&gt;

&lt;h1 id=&#34;6-how-to-format-a-matrix&#34;&gt;6. How to format a matrix&lt;/h1&gt;

&lt;p&gt;/*version I: use matrix options*/&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;proc iml; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; use sashelp.class; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; col={&amp;ldquo;Age&amp;rdquo; &amp;ldquo;Height&amp;rdquo; &amp;ldquo;Weight&amp;rdquo;}; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; read all var col into class; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; read all var{name} into row; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; close sashelp.class; &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; print class[&lt;font color=&#34;#ff0000&#34;&gt;rowname&lt;/font&gt;=row &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;font color=&#34;#ff0000&#34;&gt;colname&lt;/font&gt;=col &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;font color=&#34;#ff0000&#34;&gt;format&lt;/font&gt;=5.2 &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;font color=&#34;#ff0000&#34;&gt;label&lt;/font&gt;=&amp;ldquo;test, label&amp;rdquo;]; &lt;br /&gt;quit;&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;/*version II: use mattib statement*/&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;proc iml; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; use sashelp.class; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; col={&amp;ldquo;Age&amp;rdquo; &amp;ldquo;Height&amp;rdquo; &amp;ldquo;Weight&amp;rdquo;}; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; read all var col into class; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; read all var{name} into row; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; close sashelp.class; &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;font color=&#34;#ff0000&#34;&gt;mattrib&lt;/font&gt; class rowname=row &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; colname=col &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; label=&amp;ldquo;test, label&amp;rdquo; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; format=5.2; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; print class; &lt;br /&gt;quit;&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;/*version III: avoid hardcoding—use IML function and operations*/&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;proc iml; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; use sashelp.class; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;font color=&#34;#ff0000&#34;&gt;col=T(contents(sashelp,class)[3:5]);&lt;/font&gt; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; read all var col into class; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; read all var{name} into row; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; close sashelp.class; &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; mattrib class rowname=row &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; colname=col &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; label=&amp;ldquo;test, label&amp;rdquo; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; format=5.2; &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; print class; &lt;br /&gt;quit;&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;font face=&#34;Courier New&#34;&gt;&lt;em&gt;&lt;strong&gt;(IML matrix operations: to be continued)&lt;/strong&gt;&lt;/em&gt;&lt;/font&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>