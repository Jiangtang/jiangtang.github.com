<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MapReduce on Jiangtang Hu | 胡江堂</title>
    <link>/tags/mapreduce/</link>
    <description>Recent content in MapReduce on Jiangtang Hu | 胡江堂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Sep 2015 14:01:30 +0000</lastBuildDate>
    
	<atom:link href="/tags/mapreduce/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SAS MapReduce: A Quick Followup by DS2</title>
      <link>/2015/09/04/sas-mapreduce-a-quick-followup-by-ds2/</link>
      <pubDate>Fri, 04 Sep 2015 14:01:30 +0000</pubDate>
      
      <guid>/2015/09/04/sas-mapreduce-a-quick-followup-by-ds2/</guid>
      <description>(DS2 would be the king!) Years ago I made up a piece of SAS code to demonstrate the basic idea of Map-Reduce. Now this idea can be best implemented by this piece of workable program with PROC DS2 (tested in SAS 9.4 TS1M2, Win7):
 PROC DS2;
/* create some data &amp;#8211;/ data input_data / overwrite = yes; dcl double d; method init(); &amp;#160;&amp;#160; dcl int i; &amp;#160;&amp;#160; do i = 1 to 10000000; &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; /&amp;#8211; create some money values &amp;#8211;*/ &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; d = round( (ranuni(123) * 10 ), .</description>
    </item>
    
    <item>
      <title>Map and Reduce in MapReduce: a SAS Illustration</title>
      <link>/2011/10/04/map-and-reduce-in-mapreduce-a-sas-illustration/</link>
      <pubDate>Tue, 04 Oct 2011 21:31:18 +0000</pubDate>
      
      <guid>/2011/10/04/map-and-reduce-in-mapreduce-a-sas-illustration/</guid>
      <description>In last post, I mentioned Hadoop, the open source implementation of Google’s MapReduce for parallelized processing of big data. In this long National Holiday, I read the original Google paper, _MapReduce: Simplified Data Processing on Large Clusters_ by Jeffrey Dean and Sanjay Ghemawat and got that the terminologies of “map” and “reduce” were basically borrowed from Lisp, an old functional language that I even didn’t play “hello world” with. For Python users, the idea of Map and Reduce is also very straightforward because the workhorse data structure in Python is just the list, a sequence of values that you can just imagine that they are the nodes(clusters, chunk servers, …) in a distributed system.</description>
    </item>
    
  </channel>
</rss>