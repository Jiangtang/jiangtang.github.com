<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Combination on Jiangtang Hu | 胡江堂</title>
    <link>/tags/combination/index.xml</link>
    <description>Recent content in Combination on Jiangtang Hu | 胡江堂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/tags/combination/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SAS Combinatorial Functions: Snippets</title>
      <link>/2015/06/25/sas-combinatorial-functions-snippets/</link>
      <pubDate>Thu, 25 Jun 2015 12:55:38 +0000</pubDate>
      
      <guid>/2015/06/25/sas-combinatorial-functions-snippets/</guid>
      <description>

&lt;h3 id=&#34;1-permutation-and-combination&#34;&gt;1. Permutation and Combination&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span style=&#34;font-family: &#39;Courier New&#39;; font-size: xx-small;&#34;&gt;data &lt;em&gt;null&lt;/em&gt;;&lt;br /&gt; n = 5;&lt;br /&gt; r = 2;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-family: &#39;Courier New&#39;; font-size: xx-small;&#34;&gt;   *the factorial of a number;&lt;br /&gt; fact=fact(n);&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-family: &#39;Courier New&#39;; font-size: xx-small;&#34;&gt;   *for positive integers, fact(n) = gamma(n+1);&lt;br /&gt; gamm=gamma(n + 1);&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-family: &#39;Courier New&#39;; font-size: xx-small;&#34;&gt;   *C(n,r): number of combinations of n objects selected r ;&lt;br /&gt; *n! / [r!(n-r)!];&lt;br /&gt; comb1 = comb(n,r);&lt;br /&gt; comb2 = fact(n) / (fact&amp;reg; * fact(n-r));&lt;br /&gt; comb3 = gamma(n+1) / (gamma(r+1) * gamma(n-r+1));&lt;br /&gt; comb4 = exp(lcomb(n,r));&lt;br /&gt; comb5 = exp(lgamma(n+1)-lgamma(r+1)-lgamma(n-r+1));&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-family: &#39;Courier New&#39;; font-size: xx-small;&#34;&gt;   *A(n,r): number of permutation (ordered arrangements);&lt;br /&gt; *n! / (n-r)!;&lt;br /&gt; perm1 = perm(n,r);&lt;br /&gt; perm2 = fact(n) /  fact(n-r);&lt;br /&gt; perm3 = gamma(n+1) /  gamma(n-r+1);&lt;br /&gt; perm4 = exp(lperm(n,r));&lt;br /&gt; perm5 = exp(lgamma(n+1)-lgamma(n-r+1));&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-size: xx-small;&#34;&gt;&lt;span style=&#34;font-family: &#39;Courier New&#39;;&#34;&gt;   put (&lt;em&gt;all&lt;/em&gt;) (= / );&lt;br /&gt; run;&lt;/span&gt;&lt;br /&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span style=&#34;font-size: xx-small;&#34;&gt;Note functions &lt;em&gt;fact()&lt;/em&gt; and &lt;em&gt;gamm()&lt;/em&gt; can quickly reach out their limitations(&lt;em&gt;try n=&lt;span style=&#34;color: #ff0000;&#34;&gt;171 &lt;/span&gt;&lt;/em&gt;and check the overflow notes in Log window).&lt;/span&gt;&lt;/p&gt;

&lt;h3 align=&#34;left&#34;&gt;
  2. Generate Unique Pairs
&lt;/h3&gt;

&lt;p&gt;&lt;span style=&#34;font-size: xx-small;&#34;&gt;Question see &lt;/span&gt;&lt;a href=&#34;http://stackoverflow.com/questions/19875633/how-to-pick-unique-pairs-from-a-single-list&#34;&gt;&lt;span style=&#34;font-size: xx-small;&#34;&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;font-size: xx-small;&#34;&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span style=&#34;font-family: &#39;Courier New&#39;; font-size: xx-small;&#34;&gt;data &lt;em&gt;null&lt;/em&gt;;&lt;br /&gt; array x[5] $1 (&amp;#8220;A&amp;#8221; &amp;#8220;C&amp;#8221; &amp;#8220;D&amp;#8221; &amp;#8220;B&amp;#8221; &amp;#8220;E&amp;#8221;);&lt;br /&gt; n = dim(x);&lt;br /&gt; r = 2;&lt;br /&gt; ncomb = comb(n, r);&lt;br /&gt; do j = 1 to ncomb+1;&lt;br /&gt; rc = &lt;span style=&#34;color: #ff0000;&#34;&gt;allcomb&lt;/span&gt;(j, r, of x[*]);&lt;br /&gt; if rc &amp;lt; 0 then leave;&lt;br /&gt; put j 5. +3 x1 “- ” x2 +3;&lt;br /&gt; end;&lt;br /&gt; run;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span style=&#34;font-size: xx-small;&#34;&gt;The output in Log:&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span style=&#34;font-size: xx-small;&#34;&gt;1   A &amp;#8211; C&lt;br /&gt; 2   A &amp;#8211; E&lt;br /&gt; 3   A &amp;#8211; B&lt;br /&gt; 4   A &amp;#8211; D&lt;br /&gt; 5   C &amp;#8211; D&lt;br /&gt; 6   C &amp;#8211; E&lt;br /&gt; 7   C &amp;#8211; B&lt;br /&gt; 8   D &amp;#8211; B&lt;br /&gt; 9   D &amp;#8211; E&lt;br /&gt; 10   B &amp;#8211; E&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span style=&#34;font-size: xx-small;&#34;&gt;Or if you like alphabetical sorted pairs:&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span style=&#34;font-family: &#39;Courier New&#39;; font-size: xx-small;&#34;&gt;data &lt;em&gt;null&lt;/em&gt;;&lt;br /&gt; array x[5] $1 (&amp;#8220;A&amp;#8221; &amp;#8220;C&amp;#8221; &amp;#8220;D&amp;#8221; &amp;#8220;B&amp;#8221; &amp;#8220;E&amp;#8221;);&lt;br /&gt; n = dim(x);&lt;br /&gt; r = 2;&lt;br /&gt; ncomb = comb(n, r);&lt;br /&gt; do j = 1 to ncomb+1;&lt;br /&gt; rc = &lt;span style=&#34;color: #ff0000;&#34;&gt;lexcomb&lt;/span&gt;(j, r, of x[*]);&lt;br /&gt; if rc &amp;lt; 0 then leave;&lt;br /&gt; put j 5. +3 x1 “- ” x2 +3;&lt;br /&gt; end;&lt;br /&gt; run;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span style=&#34;font-size: xx-small;&#34;&gt;The output:&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span style=&#34;font-size: xx-small;&#34;&gt;1   A &amp;#8211; B&lt;br /&gt; 2   A &amp;#8211; C&lt;br /&gt; 3   A &amp;#8211; D&lt;br /&gt; 4   A &amp;#8211; E&lt;br /&gt; 5   B &amp;#8211; C&lt;br /&gt; 6   B &amp;#8211; D&lt;br /&gt; 7   B &amp;#8211; E&lt;br /&gt; 8   C &amp;#8211; D&lt;br /&gt; 9   C &amp;#8211; E&lt;br /&gt; 10   D &amp;#8211; E&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span style=&#34;font-size: xx-small;&#34;&gt;I checked &lt;/span&gt;&lt;a href=&#34;http://blogs.sas.com/content/iml/&#34;&gt;&lt;span style=&#34;font-size: xx-small;&#34;&gt;Rick Wicklin’s blog&lt;/span&gt;&lt;/a&gt; &lt;span style=&#34;font-size: xx-small;&#34;&gt;and found  &lt;/span&gt;&lt;a href=&#34;http://blogs.sas.com/content/iml/2013/09/30/generate-combinations-in-sas.html&#34;&gt;&lt;span style=&#34;font-size: xx-small;&#34;&gt;PROC IML&lt;/span&gt;&lt;/a&gt; &lt;span style=&#34;font-size: xx-small;&#34;&gt;offers a much more intuitive approach to this problem:&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span style=&#34;font-family: &#39;Courier New&#39;; font-size: xx-small;&#34;&gt;proc iml;&lt;br /&gt; n = 5;&lt;br /&gt; r = 2;&lt;br /&gt; idx = &lt;span style=&#34;color: #ff0000;&#34;&gt;allcomb&lt;/span&gt;(n, r);&lt;br /&gt; print idx;&lt;br /&gt; quit;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span style=&#34;font-size: xx-small;&#34;&gt;The output:&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span style=&#34;font-size: xx-small;&#34;&gt;1 2&lt;br /&gt; 2 3&lt;br /&gt; 1 3&lt;br /&gt; 3 4&lt;br /&gt; 2 4&lt;br /&gt; 1 4&lt;br /&gt; 4 5&lt;br /&gt; 3 5&lt;br /&gt; 2 5&lt;br /&gt; 1 5 &lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span style=&#34;font-size: xx-small;&#34;&gt;or make the output more readable:&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span style=&#34;font-family: &#39;Courier New&#39;; font-size: xx-small;&#34;&gt;proc iml;&lt;br /&gt; n = 5;&lt;br /&gt; r = 2;&lt;br /&gt; idx = allcomb(n, r);&lt;br /&gt; print idx;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-family: &#39;Courier New&#39;; font-size: xx-small;&#34;&gt;    Items = {&amp;#8220;A&amp;#8221; &amp;#8220;C&amp;#8221; &amp;#8220;D&amp;#8221; &amp;#8220;B&amp;#8221; &amp;#8220;E&amp;#8221;};&lt;br /&gt; S = Items[ ,idx];&lt;br /&gt; S = shape(S, 0, r);&lt;br /&gt; print S[r=(char(1:nrow(S)))];&lt;br /&gt; quit;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span style=&#34;font-size: xx-small;&#34;&gt;the output:&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span style=&#34;font-size: xx-small;&#34;&gt;1  A C&lt;br /&gt; 2  C D&lt;br /&gt; 3  A D&lt;br /&gt; 4  D B&lt;br /&gt; 5  C B&lt;br /&gt; 6  A B&lt;br /&gt; 7  B E&lt;br /&gt; 8  D E&lt;br /&gt; 9  C E&lt;br /&gt; 10 A E &lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;3-generate-unique-pairs-a-macro&#34;&gt;3. Generate Unique Pairs: A Macro&lt;/h3&gt;

&lt;p&gt;&lt;span style=&#34;font-size: xx-small;&#34;&gt;Years ago when the build-in functions above might not be available in SAS, a &lt;/span&gt;&lt;a href=&#34;http://www.urz.uni-heidelberg.de/statistik/sas/doc/ts498-combperm.txt&#34;&gt;&lt;span style=&#34;font-size: xx-small;&#34;&gt;macro %combo&lt;/span&gt;&lt;/a&gt; &lt;span style=&#34;font-size: xx-small;&#34;&gt;did the same job:&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span style=&#34;font-family: &#39;Courier New&#39;; font-size: xx-small;&#34;&gt;%combo(2,a,c,d,b,e)&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span style=&#34;font-size: xx-small;&#34;&gt;The output:&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span style=&#34;font-size: xx-small;&#34;&gt;1  a c&lt;br /&gt; 2  a d&lt;br /&gt; 3  a b&lt;br /&gt; 4  a e&lt;br /&gt; 5  c d&lt;br /&gt; 6  c b&lt;br /&gt; 7  c e&lt;br /&gt; 8  d b&lt;br /&gt; 9  d e&lt;br /&gt; 10 b e&lt;br /&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span style=&#34;font-size: xx-small;&#34;&gt;It’s fun to check out the macro how to implement it by arrays.&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>