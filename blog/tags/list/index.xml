<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>List on Jiangtang Hu | 胡江堂</title>
    <link>/tags/list/</link>
    <description>Recent content in List on Jiangtang Hu | 胡江堂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Nov 2013 10:10:21 +0000</lastBuildDate>
    
	<atom:link href="/tags/list/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SAS Data Driven Programming: My 4 Favorite Techniques</title>
      <link>/2013/11/07/sas-data-driven-programming-my-4-favorite-techniques/</link>
      <pubDate>Thu, 07 Nov 2013 10:10:21 +0000</pubDate>
      
      <guid>/2013/11/07/sas-data-driven-programming-my-4-favorite-techniques/</guid>
      <description>I use relatively fixed patterns in my SAS&amp;#160; programming life. For so called data driven programming (or dynamic programming), I used the following 4 techniques, chronologically:
 macro array  call execute  list processing  for each loop   For a quick demo, I will start with a simple scenario in which the data set sashelp.zipcode should be spitted to pieces of datasets by states (in real projects, the codes would be more complicated but share the simple atom structure).</description>
    </item>
    
    <item>
      <title>List Processing With SAS (2): List Creating II</title>
      <link>/2013/07/26/list-processing-with-sas-2-list-creating-ii/</link>
      <pubDate>Fri, 26 Jul 2013 00:24:50 +0000</pubDate>
      
      <guid>/2013/07/26/list-processing-with-sas-2-list-creating-ii/</guid>
      <description>%range is a genetic list creator. To apply data driven programming technique, we need to fetch metadata from source data dynamically, for example, to get all variables from a input dataset.
You can easily make it by
1. PROC SQL, from  a SAS dictionary table, or macro variable by SELECT INTO; or
2. Proc Contents; or
3. even a smart data step with RESOLVE function and with CALL SYMPUT, like</description>
    </item>
    
    <item>
      <title>List Processing With SAS (1): List Creating I</title>
      <link>/2013/07/11/list-processing-with-sas-1-list-creating-i/</link>
      <pubDate>Thu, 11 Jul 2013 21:10:14 +0000</pubDate>
      
      <guid>/2013/07/11/list-processing-with-sas-1-list-creating-i/</guid>
      <description>Suppose you have 10 datasets, literally ds1, ds2, …ds10 and you need to concatenate them all. You may first get a quick shortcut set ds1-ds10. If such list members were generated dynamically (and may hold a form like ds1a, ds2a,… ds10a) , you will probably come out a macro solution:
 &amp;#160;&amp;#160; %macro doit; &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; data combine; &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; set %do i=1 %to &amp;n; ds&amp;amp;i %end; ; &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; run; &amp;#160;&amp;#160; %mend; &amp;#160;&amp;#160; %doit</description>
    </item>
    
    <item>
      <title>List Processing With SAS: A Github Repository</title>
      <link>/2013/03/31/list-processing-with-sas-a-github-repository/</link>
      <pubDate>Sun, 31 Mar 2013 22:24:02 +0000</pubDate>
      
      <guid>/2013/03/31/list-processing-with-sas-a-github-repository/</guid>
      <description>I have a function like macro (recursive version) to create a sequence:
 %macro _list(n,pre=ff);
%if &amp;amp;n=1 %then &amp;amp;pre.1;
%else %_list(%eval(&amp;amp;n-1)),&amp;amp;pre.&amp;n;
%mend _list;
%put %_list(3); *produces ff1, ff2, ff3;
 But when I read one of Ian Whitlock’s papers, Names, Names, Names &amp;#8211; Make Me a List (SGF 2007, SESUG 2008), I say: stop! I&amp;#8217;m gonna use Ian’s %range and I create Github page to hold it (with minimum modifications due to personal preference).</description>
    </item>
    
    <item>
      <title>Map and Reduce in MapReduce: a SAS Illustration</title>
      <link>/2011/10/04/map-and-reduce-in-mapreduce-a-sas-illustration/</link>
      <pubDate>Tue, 04 Oct 2011 21:31:18 +0000</pubDate>
      
      <guid>/2011/10/04/map-and-reduce-in-mapreduce-a-sas-illustration/</guid>
      <description>In last post, I mentioned Hadoop, the open source implementation of Google’s MapReduce for parallelized processing of big data. In this long National Holiday, I read the original Google paper, _MapReduce: Simplified Data Processing on Large Clusters_ by Jeffrey Dean and Sanjay Ghemawat and got that the terminologies of “map” and “reduce” were basically borrowed from Lisp, an old functional language that I even didn’t play “hello world” with. For Python users, the idea of Map and Reduce is also very straightforward because the workhorse data structure in Python is just the list, a sequence of values that you can just imagine that they are the nodes(clusters, chunk servers, …) in a distributed system.</description>
    </item>
    
  </channel>
</rss>